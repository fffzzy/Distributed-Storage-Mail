// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kvstore.proto

#include "kvstore.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR KVRequest_KVGetRequest::KVRequest_KVGetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.row_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.col_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct KVRequest_KVGetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KVRequest_KVGetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KVRequest_KVGetRequestDefaultTypeInternal() {}
  union {
    KVRequest_KVGetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KVRequest_KVGetRequestDefaultTypeInternal _KVRequest_KVGetRequest_default_instance_;
PROTOBUF_CONSTEXPR KVRequest_KVSgetRequest::KVRequest_KVSgetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.row_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.col_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct KVRequest_KVSgetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KVRequest_KVSgetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KVRequest_KVSgetRequestDefaultTypeInternal() {}
  union {
    KVRequest_KVSgetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KVRequest_KVSgetRequestDefaultTypeInternal _KVRequest_KVSgetRequest_default_instance_;
PROTOBUF_CONSTEXPR KVRequest_KVPutRequest::KVRequest_KVPutRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.row_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.col_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct KVRequest_KVPutRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KVRequest_KVPutRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KVRequest_KVPutRequestDefaultTypeInternal() {}
  union {
    KVRequest_KVPutRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KVRequest_KVPutRequestDefaultTypeInternal _KVRequest_KVPutRequest_default_instance_;
PROTOBUF_CONSTEXPR KVRequest_KVSputRequest::KVRequest_KVSputRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.row_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.col_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct KVRequest_KVSputRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KVRequest_KVSputRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KVRequest_KVSputRequestDefaultTypeInternal() {}
  union {
    KVRequest_KVSputRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KVRequest_KVSputRequestDefaultTypeInternal _KVRequest_KVSputRequest_default_instance_;
PROTOBUF_CONSTEXPR KVRequest_KVCPutRequest::KVRequest_KVCPutRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.row_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.col_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cur_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.new_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct KVRequest_KVCPutRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KVRequest_KVCPutRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KVRequest_KVCPutRequestDefaultTypeInternal() {}
  union {
    KVRequest_KVCPutRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KVRequest_KVCPutRequestDefaultTypeInternal _KVRequest_KVCPutRequest_default_instance_;
PROTOBUF_CONSTEXPR KVRequest_KVScputRequest::KVRequest_KVScputRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.row_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.col_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cur_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.new_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct KVRequest_KVScputRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KVRequest_KVScputRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KVRequest_KVScputRequestDefaultTypeInternal() {}
  union {
    KVRequest_KVScputRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KVRequest_KVScputRequestDefaultTypeInternal _KVRequest_KVScputRequest_default_instance_;
PROTOBUF_CONSTEXPR KVRequest_KVDeleteRequest::KVRequest_KVDeleteRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.row_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.col_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct KVRequest_KVDeleteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KVRequest_KVDeleteRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KVRequest_KVDeleteRequestDefaultTypeInternal() {}
  union {
    KVRequest_KVDeleteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KVRequest_KVDeleteRequestDefaultTypeInternal _KVRequest_KVDeleteRequest_default_instance_;
PROTOBUF_CONSTEXPR KVRequest_KVSdeleteRequest::KVRequest_KVSdeleteRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.row_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.col_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct KVRequest_KVSdeleteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KVRequest_KVSdeleteRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KVRequest_KVSdeleteRequestDefaultTypeInternal() {}
  union {
    KVRequest_KVSdeleteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KVRequest_KVSdeleteRequestDefaultTypeInternal _KVRequest_KVSdeleteRequest_default_instance_;
PROTOBUF_CONSTEXPR KVRequest_KVSuspendRequest::KVRequest_KVSuspendRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.target_addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct KVRequest_KVSuspendRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KVRequest_KVSuspendRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KVRequest_KVSuspendRequestDefaultTypeInternal() {}
  union {
    KVRequest_KVSuspendRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KVRequest_KVSuspendRequestDefaultTypeInternal _KVRequest_KVSuspendRequest_default_instance_;
PROTOBUF_CONSTEXPR KVRequest_KVRecoveryRequest::KVRequest_KVRecoveryRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.target_addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct KVRequest_KVRecoveryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KVRequest_KVRecoveryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KVRequest_KVRecoveryRequestDefaultTypeInternal() {}
  union {
    KVRequest_KVRecoveryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KVRequest_KVRecoveryRequestDefaultTypeInternal _KVRequest_KVRecoveryRequest_default_instance_;
PROTOBUF_CONSTEXPR KVRequest_KVFiletransferRequest::KVRequest_KVFiletransferRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_type_)*/0
  , /*decltype(_impl_.tablet_idx_)*/0} {}
struct KVRequest_KVFiletransferRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KVRequest_KVFiletransferRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KVRequest_KVFiletransferRequestDefaultTypeInternal() {}
  union {
    KVRequest_KVFiletransferRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KVRequest_KVFiletransferRequestDefaultTypeInternal _KVRequest_KVFiletransferRequest_default_instance_;
PROTOBUF_CONSTEXPR KVRequest_KVReplayRequest::KVRequest_KVReplayRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tablet_target_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tablet_num_)*/0} {}
struct KVRequest_KVReplayRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KVRequest_KVReplayRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KVRequest_KVReplayRequestDefaultTypeInternal() {}
  union {
    KVRequest_KVReplayRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KVRequest_KVReplayRequestDefaultTypeInternal _KVRequest_KVReplayRequest_default_instance_;
PROTOBUF_CONSTEXPR KVRequest::KVRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct KVRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KVRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KVRequestDefaultTypeInternal() {}
  union {
    KVRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KVRequestDefaultTypeInternal _KVRequest_default_instance_;
PROTOBUF_CONSTEXPR KVResponse::KVResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/0} {}
struct KVResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KVResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KVResponseDefaultTypeInternal() {}
  union {
    KVResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KVResponseDefaultTypeInternal _KVResponse_default_instance_;
PROTOBUF_CONSTEXPR FetchNodeRequest::FetchNodeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.row_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.col_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct FetchNodeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FetchNodeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FetchNodeRequestDefaultTypeInternal() {}
  union {
    FetchNodeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FetchNodeRequestDefaultTypeInternal _FetchNodeRequest_default_instance_;
PROTOBUF_CONSTEXPR FetchNodeResponse::FetchNodeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/0} {}
struct FetchNodeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FetchNodeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FetchNodeResponseDefaultTypeInternal() {}
  union {
    FetchNodeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FetchNodeResponseDefaultTypeInternal _FetchNodeResponse_default_instance_;
PROTOBUF_CONSTEXPR PollStatusRequest::PollStatusRequest(
    ::_pbi::ConstantInitialized) {}
struct PollStatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PollStatusRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PollStatusRequestDefaultTypeInternal() {}
  union {
    PollStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PollStatusRequestDefaultTypeInternal _PollStatusRequest_default_instance_;
PROTOBUF_CONSTEXPR PollStatusResponse_Cluster_Node::PollStatusResponse_Cluster_Node(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_primary_)*/false} {}
struct PollStatusResponse_Cluster_NodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PollStatusResponse_Cluster_NodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PollStatusResponse_Cluster_NodeDefaultTypeInternal() {}
  union {
    PollStatusResponse_Cluster_Node _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PollStatusResponse_Cluster_NodeDefaultTypeInternal _PollStatusResponse_Cluster_Node_default_instance_;
PROTOBUF_CONSTEXPR PollStatusResponse_Cluster::PollStatusResponse_Cluster(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nodes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PollStatusResponse_ClusterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PollStatusResponse_ClusterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PollStatusResponse_ClusterDefaultTypeInternal() {}
  union {
    PollStatusResponse_Cluster _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PollStatusResponse_ClusterDefaultTypeInternal _PollStatusResponse_Cluster_default_instance_;
PROTOBUF_CONSTEXPR PollStatusResponse::PollStatusResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clusters_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PollStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PollStatusResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PollStatusResponseDefaultTypeInternal() {}
  union {
    PollStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PollStatusResponseDefaultTypeInternal _PollStatusResponse_default_instance_;
PROTOBUF_CONSTEXPR SuspendRequest::SuspendRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.node_addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cluster_id_)*/0} {}
struct SuspendRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SuspendRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SuspendRequestDefaultTypeInternal() {}
  union {
    SuspendRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SuspendRequestDefaultTypeInternal _SuspendRequest_default_instance_;
PROTOBUF_CONSTEXPR ReviveRequest::ReviveRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.node_addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cluster_id_)*/0} {}
struct ReviveRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReviveRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReviveRequestDefaultTypeInternal() {}
  union {
    ReviveRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReviveRequestDefaultTypeInternal _ReviveRequest_default_instance_;
PROTOBUF_CONSTEXPR NotifyRecoveryFinishedRequest::NotifyRecoveryFinishedRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.target_addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct NotifyRecoveryFinishedRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotifyRecoveryFinishedRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotifyRecoveryFinishedRequestDefaultTypeInternal() {}
  union {
    NotifyRecoveryFinishedRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotifyRecoveryFinishedRequestDefaultTypeInternal _NotifyRecoveryFinishedRequest_default_instance_;
static ::_pb::Metadata file_level_metadata_kvstore_2eproto[23];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_kvstore_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_kvstore_2eproto = nullptr;

const uint32_t TableStruct_kvstore_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVGetRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVGetRequest, _impl_.row_),
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVGetRequest, _impl_.col_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVSgetRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVSgetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVSgetRequest, _impl_.row_),
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVSgetRequest, _impl_.col_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVPutRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVPutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVPutRequest, _impl_.row_),
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVPutRequest, _impl_.col_),
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVPutRequest, _impl_.value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVSputRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVSputRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVSputRequest, _impl_.row_),
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVSputRequest, _impl_.col_),
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVSputRequest, _impl_.value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVCPutRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVCPutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVCPutRequest, _impl_.row_),
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVCPutRequest, _impl_.col_),
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVCPutRequest, _impl_.cur_value_),
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVCPutRequest, _impl_.new_value_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVScputRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVScputRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVScputRequest, _impl_.row_),
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVScputRequest, _impl_.col_),
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVScputRequest, _impl_.cur_value_),
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVScputRequest, _impl_.new_value_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVDeleteRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVDeleteRequest, _impl_.row_),
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVDeleteRequest, _impl_.col_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVSdeleteRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVSdeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVSdeleteRequest, _impl_.row_),
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVSdeleteRequest, _impl_.col_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVSuspendRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVSuspendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVSuspendRequest, _impl_.target_addr_),
  0,
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVRecoveryRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVRecoveryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVRecoveryRequest, _impl_.target_addr_),
  0,
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVFiletransferRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVFiletransferRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVFiletransferRequest, _impl_.file_type_),
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVFiletransferRequest, _impl_.tablet_idx_),
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVFiletransferRequest, _impl_.content_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVReplayRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVReplayRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVReplayRequest, _impl_.tablet_num_),
  PROTOBUF_FIELD_OFFSET(::KVRequest_KVReplayRequest, _impl_.tablet_target_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KVRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::KVRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::KVRequest, _impl_.request_),
  PROTOBUF_FIELD_OFFSET(::KVResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KVResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KVResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::KVResponse, _impl_.message_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::FetchNodeRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::FetchNodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FetchNodeRequest, _impl_.row_),
  PROTOBUF_FIELD_OFFSET(::FetchNodeRequest, _impl_.col_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::FetchNodeResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::FetchNodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FetchNodeResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::FetchNodeResponse, _impl_.addr_),
  PROTOBUF_FIELD_OFFSET(::FetchNodeResponse, _impl_.error_message_),
  2,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PollStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PollStatusResponse_Cluster_Node, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PollStatusResponse_Cluster_Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PollStatusResponse_Cluster_Node, _impl_.is_primary_),
  PROTOBUF_FIELD_OFFSET(::PollStatusResponse_Cluster_Node, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::PollStatusResponse_Cluster_Node, _impl_.state_),
  2,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PollStatusResponse_Cluster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PollStatusResponse_Cluster, _impl_.nodes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PollStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PollStatusResponse, _impl_.clusters_),
  PROTOBUF_FIELD_OFFSET(::SuspendRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SuspendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SuspendRequest, _impl_.cluster_id_),
  PROTOBUF_FIELD_OFFSET(::SuspendRequest, _impl_.node_addr_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ReviveRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ReviveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReviveRequest, _impl_.cluster_id_),
  PROTOBUF_FIELD_OFFSET(::ReviveRequest, _impl_.node_addr_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::NotifyRecoveryFinishedRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::NotifyRecoveryFinishedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NotifyRecoveryFinishedRequest, _impl_.target_addr_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::KVRequest_KVGetRequest)},
  { 10, 18, -1, sizeof(::KVRequest_KVSgetRequest)},
  { 20, 29, -1, sizeof(::KVRequest_KVPutRequest)},
  { 32, 41, -1, sizeof(::KVRequest_KVSputRequest)},
  { 44, 54, -1, sizeof(::KVRequest_KVCPutRequest)},
  { 58, 68, -1, sizeof(::KVRequest_KVScputRequest)},
  { 72, 80, -1, sizeof(::KVRequest_KVDeleteRequest)},
  { 82, 90, -1, sizeof(::KVRequest_KVSdeleteRequest)},
  { 92, 99, -1, sizeof(::KVRequest_KVSuspendRequest)},
  { 100, 107, -1, sizeof(::KVRequest_KVRecoveryRequest)},
  { 108, 117, -1, sizeof(::KVRequest_KVFiletransferRequest)},
  { 120, 128, -1, sizeof(::KVRequest_KVReplayRequest)},
  { 130, -1, -1, sizeof(::KVRequest)},
  { 149, 157, -1, sizeof(::KVResponse)},
  { 159, 167, -1, sizeof(::FetchNodeRequest)},
  { 169, 178, -1, sizeof(::FetchNodeResponse)},
  { 181, -1, -1, sizeof(::PollStatusRequest)},
  { 187, 196, -1, sizeof(::PollStatusResponse_Cluster_Node)},
  { 199, -1, -1, sizeof(::PollStatusResponse_Cluster)},
  { 206, -1, -1, sizeof(::PollStatusResponse)},
  { 213, 221, -1, sizeof(::SuspendRequest)},
  { 223, 231, -1, sizeof(::ReviveRequest)},
  { 233, 240, -1, sizeof(::NotifyRecoveryFinishedRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_KVRequest_KVGetRequest_default_instance_._instance,
  &::_KVRequest_KVSgetRequest_default_instance_._instance,
  &::_KVRequest_KVPutRequest_default_instance_._instance,
  &::_KVRequest_KVSputRequest_default_instance_._instance,
  &::_KVRequest_KVCPutRequest_default_instance_._instance,
  &::_KVRequest_KVScputRequest_default_instance_._instance,
  &::_KVRequest_KVDeleteRequest_default_instance_._instance,
  &::_KVRequest_KVSdeleteRequest_default_instance_._instance,
  &::_KVRequest_KVSuspendRequest_default_instance_._instance,
  &::_KVRequest_KVRecoveryRequest_default_instance_._instance,
  &::_KVRequest_KVFiletransferRequest_default_instance_._instance,
  &::_KVRequest_KVReplayRequest_default_instance_._instance,
  &::_KVRequest_default_instance_._instance,
  &::_KVResponse_default_instance_._instance,
  &::_FetchNodeRequest_default_instance_._instance,
  &::_FetchNodeResponse_default_instance_._instance,
  &::_PollStatusRequest_default_instance_._instance,
  &::_PollStatusResponse_Cluster_Node_default_instance_._instance,
  &::_PollStatusResponse_Cluster_default_instance_._instance,
  &::_PollStatusResponse_default_instance_._instance,
  &::_SuspendRequest_default_instance_._instance,
  &::_ReviveRequest_default_instance_._instance,
  &::_NotifyRecoveryFinishedRequest_default_instance_._instance,
};

const char descriptor_table_protodef_kvstore_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rkvstore.proto\032\033google/protobuf/empty.p"
  "roto\"\225\016\n\tKVRequest\022.\n\013get_request\030\001 \001(\0132"
  "\027.KVRequest.KVGetRequestH\000\0220\n\014sget_reque"
  "st\030\002 \001(\0132\030.KVRequest.KVSgetRequestH\000\022.\n\013"
  "put_request\030\003 \001(\0132\027.KVRequest.KVPutReque"
  "stH\000\0220\n\014sput_request\030\004 \001(\0132\030.KVRequest.K"
  "VSputRequestH\000\0220\n\014cput_request\030\005 \001(\0132\030.K"
  "VRequest.KVCPutRequestH\000\0222\n\rscput_reques"
  "t\030\006 \001(\0132\031.KVRequest.KVScputRequestH\000\0224\n\016"
  "delete_request\030\007 \001(\0132\032.KVRequest.KVDelet"
  "eRequestH\000\0226\n\017sdelete_request\030\010 \001(\0132\033.KV"
  "Request.KVSdeleteRequestH\000\0226\n\017suspend_re"
  "quest\030\t \001(\0132\033.KVRequest.KVSuspendRequest"
  "H\000\0228\n\020recovery_request\030\n \001(\0132\034.KVRequest"
  ".KVRecoveryRequestH\000\022@\n\024filetransfer_req"
  "uest\030\014 \001(\0132 .KVRequest.KVFiletransferReq"
  "uestH\000\0224\n\016replay_request\030\r \001(\0132\032.KVReque"
  "st.KVReplayRequestH\000\032B\n\014KVGetRequest\022\020\n\003"
  "row\030\001 \001(\tH\000\210\001\001\022\020\n\003col\030\002 \001(\tH\001\210\001\001B\006\n\004_row"
  "B\006\n\004_col\032C\n\rKVSgetRequest\022\020\n\003row\030\001 \001(\tH\000"
  "\210\001\001\022\020\n\003col\030\002 \001(\tH\001\210\001\001B\006\n\004_rowB\006\n\004_col\032`\n"
  "\014KVPutRequest\022\020\n\003row\030\001 \001(\tH\000\210\001\001\022\020\n\003col\030\002"
  " \001(\tH\001\210\001\001\022\022\n\005value\030\003 \001(\tH\002\210\001\001B\006\n\004_rowB\006\n"
  "\004_colB\010\n\006_value\032a\n\rKVSputRequest\022\020\n\003row\030"
  "\001 \001(\tH\000\210\001\001\022\020\n\003col\030\002 \001(\tH\001\210\001\001\022\022\n\005value\030\003 "
  "\001(\tH\002\210\001\001B\006\n\004_rowB\006\n\004_colB\010\n\006_value\032\217\001\n\rK"
  "VCPutRequest\022\020\n\003row\030\001 \001(\tH\000\210\001\001\022\020\n\003col\030\002 "
  "\001(\tH\001\210\001\001\022\026\n\tcur_value\030\003 \001(\tH\002\210\001\001\022\026\n\tnew_"
  "value\030\004 \001(\tH\003\210\001\001B\006\n\004_rowB\006\n\004_colB\014\n\n_cur"
  "_valueB\014\n\n_new_value\032\220\001\n\016KVScputRequest\022"
  "\020\n\003row\030\001 \001(\tH\000\210\001\001\022\020\n\003col\030\002 \001(\tH\001\210\001\001\022\026\n\tc"
  "ur_value\030\003 \001(\tH\002\210\001\001\022\026\n\tnew_value\030\004 \001(\tH\003"
  "\210\001\001B\006\n\004_rowB\006\n\004_colB\014\n\n_cur_valueB\014\n\n_ne"
  "w_value\032E\n\017KVDeleteRequest\022\020\n\003row\030\001 \001(\tH"
  "\000\210\001\001\022\020\n\003col\030\002 \001(\tH\001\210\001\001B\006\n\004_rowB\006\n\004_col\032F"
  "\n\020KVSdeleteRequest\022\020\n\003row\030\001 \001(\tH\000\210\001\001\022\020\n\003"
  "col\030\002 \001(\tH\001\210\001\001B\006\n\004_rowB\006\n\004_col\032<\n\020KVSusp"
  "endRequest\022\030\n\013target_addr\030\001 \001(\tH\000\210\001\001B\016\n\014"
  "_target_addr\032=\n\021KVRecoveryRequest\022\030\n\013tar"
  "get_addr\030\001 \001(\tH\000\210\001\001B\016\n\014_target_addr\032\222\001\n\025"
  "KVFiletransferRequest\022!\n\tfile_type\030\001 \001(\016"
  "2\t.FileTypeH\000\210\001\001\022\027\n\ntablet_idx\030\002 \001(\005H\001\210\001"
  "\001\022\024\n\007content\030\003 \001(\tH\002\210\001\001B\014\n\n_file_typeB\r\n"
  "\013_tablet_idxB\n\n\010_content\032g\n\017KVReplayRequ"
  "est\022\027\n\ntablet_num\030\001 \001(\005H\000\210\001\001\022\032\n\rtablet_t"
  "arget\030\002 \001(\tH\001\210\001\001B\r\n\013_tablet_numB\020\n\016_tabl"
  "et_targetB\t\n\007request\"]\n\nKVResponse\022\"\n\006st"
  "atus\030\001 \001(\0162\r.KVStatusCodeH\000\210\001\001\022\024\n\007messag"
  "e\030\002 \001(\tH\001\210\001\001B\t\n\007_statusB\n\n\010_message\"F\n\020F"
  "etchNodeRequest\022\020\n\003row\030\001 \001(\tH\000\210\001\001\022\020\n\003col"
  "\030\002 \001(\tH\001\210\001\001B\006\n\004_rowB\006\n\004_col\"\214\001\n\021FetchNod"
  "eResponse\022\"\n\006status\030\001 \001(\0162\r.KVStatusCode"
  "H\000\210\001\001\022\021\n\004addr\030\002 \001(\tH\001\210\001\001\022\032\n\rerror_messag"
  "e\030\003 \001(\tH\002\210\001\001B\t\n\007_statusB\007\n\005_addrB\020\n\016_err"
  "or_message\"\023\n\021PollStatusRequest\"\360\001\n\022Poll"
  "StatusResponse\022-\n\010clusters\030\001 \003(\0132\033.PollS"
  "tatusResponse.Cluster\032\252\001\n\007Cluster\022/\n\005nod"
  "es\030\001 \003(\0132 .PollStatusResponse.Cluster.No"
  "de\032n\n\004Node\022\027\n\nis_primary\030\001 \001(\010H\000\210\001\001\022\024\n\007a"
  "ddress\030\002 \001(\tH\001\210\001\001\022\022\n\005state\030\003 \001(\tH\002\210\001\001B\r\n"
  "\013_is_primaryB\n\n\010_addressB\010\n\006_state\"^\n\016Su"
  "spendRequest\022\027\n\ncluster_id\030\001 \001(\005H\000\210\001\001\022\026\n"
  "\tnode_addr\030\002 \001(\tH\001\210\001\001B\r\n\013_cluster_idB\014\n\n"
  "_node_addr\"]\n\rReviveRequest\022\027\n\ncluster_i"
  "d\030\001 \001(\005H\000\210\001\001\022\026\n\tnode_addr\030\002 \001(\tH\001\210\001\001B\r\n\013"
  "_cluster_idB\014\n\n_node_addr\"I\n\035NotifyRecov"
  "eryFinishedRequest\022\030\n\013target_addr\030\001 \001(\tH"
  "\000\210\001\001B\016\n\014_target_addr*G\n\014KVStatusCode\022\013\n\007"
  "SUCCESS\020\000\022\013\n\007FAILURE\020\001\022\r\n\tSUSPENDED\020\002\022\016\n"
  "\nRECOVERING\020\003*\'\n\010FileType\022\016\n\nCHECKPOINT\020"
  "\000\022\013\n\007LOGFILE\020\0012\237\002\n\rKVStoreMaster\0228\n\rFetc"
  "hNodeAddr\022\021.FetchNodeRequest\032\022.FetchNode"
  "Response\"\000\0227\n\nPollStatus\022\022.PollStatusReq"
  "uest\032\023.PollStatusResponse\"\000\022)\n\007Suspend\022\017"
  ".SuspendRequest\032\013.KVResponse\"\000\022\'\n\006Revive"
  "\022\016.ReviveRequest\032\013.KVResponse\"\000\022G\n\026Notif"
  "yRecoveryFinished\022\036.NotifyRecoveryFinish"
  "edRequest\032\013.KVResponse\"\0002i\n\013KVStoreNode\022"
  "$\n\007Execute\022\n.KVRequest\032\013.KVResponse\"\000\0224\n"
  "\013CheckHealth\022\026.google.protobuf.Empty\032\013.K"
  "VResponse\"\000b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_kvstore_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_kvstore_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_kvstore_2eproto = {
    false, false, 3219, descriptor_table_protodef_kvstore_2eproto,
    "kvstore.proto",
    &descriptor_table_kvstore_2eproto_once, descriptor_table_kvstore_2eproto_deps, 1, 23,
    schemas, file_default_instances, TableStruct_kvstore_2eproto::offsets,
    file_level_metadata_kvstore_2eproto, file_level_enum_descriptors_kvstore_2eproto,
    file_level_service_descriptors_kvstore_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_kvstore_2eproto_getter() {
  return &descriptor_table_kvstore_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_kvstore_2eproto(&descriptor_table_kvstore_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KVStatusCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kvstore_2eproto);
  return file_level_enum_descriptors_kvstore_2eproto[0];
}
bool KVStatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kvstore_2eproto);
  return file_level_enum_descriptors_kvstore_2eproto[1];
}
bool FileType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class KVRequest_KVGetRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<KVRequest_KVGetRequest>()._impl_._has_bits_);
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_col(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

KVRequest_KVGetRequest::KVRequest_KVGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KVRequest.KVGetRequest)
}
KVRequest_KVGetRequest::KVRequest_KVGetRequest(const KVRequest_KVGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KVRequest_KVGetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_){}
    , decltype(_impl_.col_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.row_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.row_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_row()) {
    _this->_impl_.row_.Set(from._internal_row(), 
      _this->GetArenaForAllocation());
  }
  _impl_.col_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_col()) {
    _this->_impl_.col_.Set(from._internal_col(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:KVRequest.KVGetRequest)
}

inline void KVRequest_KVGetRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_){}
    , decltype(_impl_.col_){}
  };
  _impl_.row_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.row_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.col_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KVRequest_KVGetRequest::~KVRequest_KVGetRequest() {
  // @@protoc_insertion_point(destructor:KVRequest.KVGetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KVRequest_KVGetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.row_.Destroy();
  _impl_.col_.Destroy();
}

void KVRequest_KVGetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KVRequest_KVGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:KVRequest.KVGetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.row_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.col_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KVRequest_KVGetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_row();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KVRequest.KVGetRequest.row"));
        } else
          goto handle_unusual;
        continue;
      // optional string col = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_col();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KVRequest.KVGetRequest.col"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KVRequest_KVGetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KVRequest.KVGetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string row = 1;
  if (_internal_has_row()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_row().data(), static_cast<int>(this->_internal_row().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KVRequest.KVGetRequest.row");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_row(), target);
  }

  // optional string col = 2;
  if (_internal_has_col()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_col().data(), static_cast<int>(this->_internal_col().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KVRequest.KVGetRequest.col");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_col(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KVRequest.KVGetRequest)
  return target;
}

size_t KVRequest_KVGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KVRequest.KVGetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string row = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_row());
    }

    // optional string col = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_col());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KVRequest_KVGetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KVRequest_KVGetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KVRequest_KVGetRequest::GetClassData() const { return &_class_data_; }


void KVRequest_KVGetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KVRequest_KVGetRequest*>(&to_msg);
  auto& from = static_cast<const KVRequest_KVGetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KVRequest.KVGetRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_row(from._internal_row());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_col(from._internal_col());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KVRequest_KVGetRequest::CopyFrom(const KVRequest_KVGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KVRequest.KVGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVRequest_KVGetRequest::IsInitialized() const {
  return true;
}

void KVRequest_KVGetRequest::InternalSwap(KVRequest_KVGetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.row_, lhs_arena,
      &other->_impl_.row_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.col_, lhs_arena,
      &other->_impl_.col_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KVRequest_KVGetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2eproto_getter, &descriptor_table_kvstore_2eproto_once,
      file_level_metadata_kvstore_2eproto[0]);
}

// ===================================================================

class KVRequest_KVSgetRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<KVRequest_KVSgetRequest>()._impl_._has_bits_);
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_col(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

KVRequest_KVSgetRequest::KVRequest_KVSgetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KVRequest.KVSgetRequest)
}
KVRequest_KVSgetRequest::KVRequest_KVSgetRequest(const KVRequest_KVSgetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KVRequest_KVSgetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_){}
    , decltype(_impl_.col_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.row_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.row_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_row()) {
    _this->_impl_.row_.Set(from._internal_row(), 
      _this->GetArenaForAllocation());
  }
  _impl_.col_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_col()) {
    _this->_impl_.col_.Set(from._internal_col(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:KVRequest.KVSgetRequest)
}

inline void KVRequest_KVSgetRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_){}
    , decltype(_impl_.col_){}
  };
  _impl_.row_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.row_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.col_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KVRequest_KVSgetRequest::~KVRequest_KVSgetRequest() {
  // @@protoc_insertion_point(destructor:KVRequest.KVSgetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KVRequest_KVSgetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.row_.Destroy();
  _impl_.col_.Destroy();
}

void KVRequest_KVSgetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KVRequest_KVSgetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:KVRequest.KVSgetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.row_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.col_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KVRequest_KVSgetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_row();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KVRequest.KVSgetRequest.row"));
        } else
          goto handle_unusual;
        continue;
      // optional string col = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_col();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KVRequest.KVSgetRequest.col"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KVRequest_KVSgetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KVRequest.KVSgetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string row = 1;
  if (_internal_has_row()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_row().data(), static_cast<int>(this->_internal_row().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KVRequest.KVSgetRequest.row");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_row(), target);
  }

  // optional string col = 2;
  if (_internal_has_col()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_col().data(), static_cast<int>(this->_internal_col().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KVRequest.KVSgetRequest.col");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_col(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KVRequest.KVSgetRequest)
  return target;
}

size_t KVRequest_KVSgetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KVRequest.KVSgetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string row = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_row());
    }

    // optional string col = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_col());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KVRequest_KVSgetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KVRequest_KVSgetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KVRequest_KVSgetRequest::GetClassData() const { return &_class_data_; }


void KVRequest_KVSgetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KVRequest_KVSgetRequest*>(&to_msg);
  auto& from = static_cast<const KVRequest_KVSgetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KVRequest.KVSgetRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_row(from._internal_row());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_col(from._internal_col());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KVRequest_KVSgetRequest::CopyFrom(const KVRequest_KVSgetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KVRequest.KVSgetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVRequest_KVSgetRequest::IsInitialized() const {
  return true;
}

void KVRequest_KVSgetRequest::InternalSwap(KVRequest_KVSgetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.row_, lhs_arena,
      &other->_impl_.row_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.col_, lhs_arena,
      &other->_impl_.col_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KVRequest_KVSgetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2eproto_getter, &descriptor_table_kvstore_2eproto_once,
      file_level_metadata_kvstore_2eproto[1]);
}

// ===================================================================

class KVRequest_KVPutRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<KVRequest_KVPutRequest>()._impl_._has_bits_);
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_col(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

KVRequest_KVPutRequest::KVRequest_KVPutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KVRequest.KVPutRequest)
}
KVRequest_KVPutRequest::KVRequest_KVPutRequest(const KVRequest_KVPutRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KVRequest_KVPutRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_){}
    , decltype(_impl_.col_){}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.row_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.row_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_row()) {
    _this->_impl_.row_.Set(from._internal_row(), 
      _this->GetArenaForAllocation());
  }
  _impl_.col_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_col()) {
    _this->_impl_.col_.Set(from._internal_col(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:KVRequest.KVPutRequest)
}

inline void KVRequest_KVPutRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_){}
    , decltype(_impl_.col_){}
    , decltype(_impl_.value_){}
  };
  _impl_.row_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.row_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.col_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KVRequest_KVPutRequest::~KVRequest_KVPutRequest() {
  // @@protoc_insertion_point(destructor:KVRequest.KVPutRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KVRequest_KVPutRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.row_.Destroy();
  _impl_.col_.Destroy();
  _impl_.value_.Destroy();
}

void KVRequest_KVPutRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KVRequest_KVPutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:KVRequest.KVPutRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.row_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.col_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KVRequest_KVPutRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_row();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KVRequest.KVPutRequest.row"));
        } else
          goto handle_unusual;
        continue;
      // optional string col = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_col();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KVRequest.KVPutRequest.col"));
        } else
          goto handle_unusual;
        continue;
      // optional string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KVRequest.KVPutRequest.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KVRequest_KVPutRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KVRequest.KVPutRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string row = 1;
  if (_internal_has_row()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_row().data(), static_cast<int>(this->_internal_row().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KVRequest.KVPutRequest.row");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_row(), target);
  }

  // optional string col = 2;
  if (_internal_has_col()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_col().data(), static_cast<int>(this->_internal_col().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KVRequest.KVPutRequest.col");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_col(), target);
  }

  // optional string value = 3;
  if (_internal_has_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KVRequest.KVPutRequest.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KVRequest.KVPutRequest)
  return target;
}

size_t KVRequest_KVPutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KVRequest.KVPutRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string row = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_row());
    }

    // optional string col = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_col());
    }

    // optional string value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KVRequest_KVPutRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KVRequest_KVPutRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KVRequest_KVPutRequest::GetClassData() const { return &_class_data_; }


void KVRequest_KVPutRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KVRequest_KVPutRequest*>(&to_msg);
  auto& from = static_cast<const KVRequest_KVPutRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KVRequest.KVPutRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_row(from._internal_row());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_col(from._internal_col());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_value(from._internal_value());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KVRequest_KVPutRequest::CopyFrom(const KVRequest_KVPutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KVRequest.KVPutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVRequest_KVPutRequest::IsInitialized() const {
  return true;
}

void KVRequest_KVPutRequest::InternalSwap(KVRequest_KVPutRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.row_, lhs_arena,
      &other->_impl_.row_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.col_, lhs_arena,
      &other->_impl_.col_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KVRequest_KVPutRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2eproto_getter, &descriptor_table_kvstore_2eproto_once,
      file_level_metadata_kvstore_2eproto[2]);
}

// ===================================================================

class KVRequest_KVSputRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<KVRequest_KVSputRequest>()._impl_._has_bits_);
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_col(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

KVRequest_KVSputRequest::KVRequest_KVSputRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KVRequest.KVSputRequest)
}
KVRequest_KVSputRequest::KVRequest_KVSputRequest(const KVRequest_KVSputRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KVRequest_KVSputRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_){}
    , decltype(_impl_.col_){}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.row_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.row_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_row()) {
    _this->_impl_.row_.Set(from._internal_row(), 
      _this->GetArenaForAllocation());
  }
  _impl_.col_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_col()) {
    _this->_impl_.col_.Set(from._internal_col(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:KVRequest.KVSputRequest)
}

inline void KVRequest_KVSputRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_){}
    , decltype(_impl_.col_){}
    , decltype(_impl_.value_){}
  };
  _impl_.row_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.row_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.col_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KVRequest_KVSputRequest::~KVRequest_KVSputRequest() {
  // @@protoc_insertion_point(destructor:KVRequest.KVSputRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KVRequest_KVSputRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.row_.Destroy();
  _impl_.col_.Destroy();
  _impl_.value_.Destroy();
}

void KVRequest_KVSputRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KVRequest_KVSputRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:KVRequest.KVSputRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.row_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.col_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KVRequest_KVSputRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_row();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KVRequest.KVSputRequest.row"));
        } else
          goto handle_unusual;
        continue;
      // optional string col = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_col();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KVRequest.KVSputRequest.col"));
        } else
          goto handle_unusual;
        continue;
      // optional string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KVRequest.KVSputRequest.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KVRequest_KVSputRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KVRequest.KVSputRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string row = 1;
  if (_internal_has_row()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_row().data(), static_cast<int>(this->_internal_row().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KVRequest.KVSputRequest.row");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_row(), target);
  }

  // optional string col = 2;
  if (_internal_has_col()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_col().data(), static_cast<int>(this->_internal_col().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KVRequest.KVSputRequest.col");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_col(), target);
  }

  // optional string value = 3;
  if (_internal_has_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KVRequest.KVSputRequest.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KVRequest.KVSputRequest)
  return target;
}

size_t KVRequest_KVSputRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KVRequest.KVSputRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string row = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_row());
    }

    // optional string col = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_col());
    }

    // optional string value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KVRequest_KVSputRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KVRequest_KVSputRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KVRequest_KVSputRequest::GetClassData() const { return &_class_data_; }


void KVRequest_KVSputRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KVRequest_KVSputRequest*>(&to_msg);
  auto& from = static_cast<const KVRequest_KVSputRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KVRequest.KVSputRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_row(from._internal_row());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_col(from._internal_col());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_value(from._internal_value());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KVRequest_KVSputRequest::CopyFrom(const KVRequest_KVSputRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KVRequest.KVSputRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVRequest_KVSputRequest::IsInitialized() const {
  return true;
}

void KVRequest_KVSputRequest::InternalSwap(KVRequest_KVSputRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.row_, lhs_arena,
      &other->_impl_.row_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.col_, lhs_arena,
      &other->_impl_.col_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KVRequest_KVSputRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2eproto_getter, &descriptor_table_kvstore_2eproto_once,
      file_level_metadata_kvstore_2eproto[3]);
}

// ===================================================================

class KVRequest_KVCPutRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<KVRequest_KVCPutRequest>()._impl_._has_bits_);
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_col(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cur_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_new_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

KVRequest_KVCPutRequest::KVRequest_KVCPutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KVRequest.KVCPutRequest)
}
KVRequest_KVCPutRequest::KVRequest_KVCPutRequest(const KVRequest_KVCPutRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KVRequest_KVCPutRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_){}
    , decltype(_impl_.col_){}
    , decltype(_impl_.cur_value_){}
    , decltype(_impl_.new_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.row_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.row_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_row()) {
    _this->_impl_.row_.Set(from._internal_row(), 
      _this->GetArenaForAllocation());
  }
  _impl_.col_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_col()) {
    _this->_impl_.col_.Set(from._internal_col(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cur_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cur_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cur_value()) {
    _this->_impl_.cur_value_.Set(from._internal_cur_value(), 
      _this->GetArenaForAllocation());
  }
  _impl_.new_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_new_value()) {
    _this->_impl_.new_value_.Set(from._internal_new_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:KVRequest.KVCPutRequest)
}

inline void KVRequest_KVCPutRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_){}
    , decltype(_impl_.col_){}
    , decltype(_impl_.cur_value_){}
    , decltype(_impl_.new_value_){}
  };
  _impl_.row_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.row_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.col_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cur_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cur_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.new_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KVRequest_KVCPutRequest::~KVRequest_KVCPutRequest() {
  // @@protoc_insertion_point(destructor:KVRequest.KVCPutRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KVRequest_KVCPutRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.row_.Destroy();
  _impl_.col_.Destroy();
  _impl_.cur_value_.Destroy();
  _impl_.new_value_.Destroy();
}

void KVRequest_KVCPutRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KVRequest_KVCPutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:KVRequest.KVCPutRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.row_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.col_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.cur_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.new_value_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KVRequest_KVCPutRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_row();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KVRequest.KVCPutRequest.row"));
        } else
          goto handle_unusual;
        continue;
      // optional string col = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_col();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KVRequest.KVCPutRequest.col"));
        } else
          goto handle_unusual;
        continue;
      // optional string cur_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_cur_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KVRequest.KVCPutRequest.cur_value"));
        } else
          goto handle_unusual;
        continue;
      // optional string new_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_new_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KVRequest.KVCPutRequest.new_value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KVRequest_KVCPutRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KVRequest.KVCPutRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string row = 1;
  if (_internal_has_row()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_row().data(), static_cast<int>(this->_internal_row().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KVRequest.KVCPutRequest.row");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_row(), target);
  }

  // optional string col = 2;
  if (_internal_has_col()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_col().data(), static_cast<int>(this->_internal_col().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KVRequest.KVCPutRequest.col");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_col(), target);
  }

  // optional string cur_value = 3;
  if (_internal_has_cur_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cur_value().data(), static_cast<int>(this->_internal_cur_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KVRequest.KVCPutRequest.cur_value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cur_value(), target);
  }

  // optional string new_value = 4;
  if (_internal_has_new_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_value().data(), static_cast<int>(this->_internal_new_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KVRequest.KVCPutRequest.new_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_new_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KVRequest.KVCPutRequest)
  return target;
}

size_t KVRequest_KVCPutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KVRequest.KVCPutRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string row = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_row());
    }

    // optional string col = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_col());
    }

    // optional string cur_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cur_value());
    }

    // optional string new_value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_new_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KVRequest_KVCPutRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KVRequest_KVCPutRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KVRequest_KVCPutRequest::GetClassData() const { return &_class_data_; }


void KVRequest_KVCPutRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KVRequest_KVCPutRequest*>(&to_msg);
  auto& from = static_cast<const KVRequest_KVCPutRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KVRequest.KVCPutRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_row(from._internal_row());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_col(from._internal_col());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_cur_value(from._internal_cur_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_new_value(from._internal_new_value());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KVRequest_KVCPutRequest::CopyFrom(const KVRequest_KVCPutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KVRequest.KVCPutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVRequest_KVCPutRequest::IsInitialized() const {
  return true;
}

void KVRequest_KVCPutRequest::InternalSwap(KVRequest_KVCPutRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.row_, lhs_arena,
      &other->_impl_.row_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.col_, lhs_arena,
      &other->_impl_.col_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cur_value_, lhs_arena,
      &other->_impl_.cur_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.new_value_, lhs_arena,
      &other->_impl_.new_value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KVRequest_KVCPutRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2eproto_getter, &descriptor_table_kvstore_2eproto_once,
      file_level_metadata_kvstore_2eproto[4]);
}

// ===================================================================

class KVRequest_KVScputRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<KVRequest_KVScputRequest>()._impl_._has_bits_);
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_col(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cur_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_new_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

KVRequest_KVScputRequest::KVRequest_KVScputRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KVRequest.KVScputRequest)
}
KVRequest_KVScputRequest::KVRequest_KVScputRequest(const KVRequest_KVScputRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KVRequest_KVScputRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_){}
    , decltype(_impl_.col_){}
    , decltype(_impl_.cur_value_){}
    , decltype(_impl_.new_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.row_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.row_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_row()) {
    _this->_impl_.row_.Set(from._internal_row(), 
      _this->GetArenaForAllocation());
  }
  _impl_.col_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_col()) {
    _this->_impl_.col_.Set(from._internal_col(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cur_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cur_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cur_value()) {
    _this->_impl_.cur_value_.Set(from._internal_cur_value(), 
      _this->GetArenaForAllocation());
  }
  _impl_.new_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_new_value()) {
    _this->_impl_.new_value_.Set(from._internal_new_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:KVRequest.KVScputRequest)
}

inline void KVRequest_KVScputRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_){}
    , decltype(_impl_.col_){}
    , decltype(_impl_.cur_value_){}
    , decltype(_impl_.new_value_){}
  };
  _impl_.row_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.row_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.col_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cur_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cur_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.new_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KVRequest_KVScputRequest::~KVRequest_KVScputRequest() {
  // @@protoc_insertion_point(destructor:KVRequest.KVScputRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KVRequest_KVScputRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.row_.Destroy();
  _impl_.col_.Destroy();
  _impl_.cur_value_.Destroy();
  _impl_.new_value_.Destroy();
}

void KVRequest_KVScputRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KVRequest_KVScputRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:KVRequest.KVScputRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.row_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.col_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.cur_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.new_value_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KVRequest_KVScputRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_row();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KVRequest.KVScputRequest.row"));
        } else
          goto handle_unusual;
        continue;
      // optional string col = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_col();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KVRequest.KVScputRequest.col"));
        } else
          goto handle_unusual;
        continue;
      // optional string cur_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_cur_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KVRequest.KVScputRequest.cur_value"));
        } else
          goto handle_unusual;
        continue;
      // optional string new_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_new_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KVRequest.KVScputRequest.new_value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KVRequest_KVScputRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KVRequest.KVScputRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string row = 1;
  if (_internal_has_row()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_row().data(), static_cast<int>(this->_internal_row().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KVRequest.KVScputRequest.row");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_row(), target);
  }

  // optional string col = 2;
  if (_internal_has_col()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_col().data(), static_cast<int>(this->_internal_col().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KVRequest.KVScputRequest.col");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_col(), target);
  }

  // optional string cur_value = 3;
  if (_internal_has_cur_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cur_value().data(), static_cast<int>(this->_internal_cur_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KVRequest.KVScputRequest.cur_value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cur_value(), target);
  }

  // optional string new_value = 4;
  if (_internal_has_new_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_value().data(), static_cast<int>(this->_internal_new_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KVRequest.KVScputRequest.new_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_new_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KVRequest.KVScputRequest)
  return target;
}

size_t KVRequest_KVScputRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KVRequest.KVScputRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string row = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_row());
    }

    // optional string col = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_col());
    }

    // optional string cur_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cur_value());
    }

    // optional string new_value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_new_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KVRequest_KVScputRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KVRequest_KVScputRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KVRequest_KVScputRequest::GetClassData() const { return &_class_data_; }


void KVRequest_KVScputRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KVRequest_KVScputRequest*>(&to_msg);
  auto& from = static_cast<const KVRequest_KVScputRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KVRequest.KVScputRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_row(from._internal_row());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_col(from._internal_col());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_cur_value(from._internal_cur_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_new_value(from._internal_new_value());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KVRequest_KVScputRequest::CopyFrom(const KVRequest_KVScputRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KVRequest.KVScputRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVRequest_KVScputRequest::IsInitialized() const {
  return true;
}

void KVRequest_KVScputRequest::InternalSwap(KVRequest_KVScputRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.row_, lhs_arena,
      &other->_impl_.row_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.col_, lhs_arena,
      &other->_impl_.col_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cur_value_, lhs_arena,
      &other->_impl_.cur_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.new_value_, lhs_arena,
      &other->_impl_.new_value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KVRequest_KVScputRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2eproto_getter, &descriptor_table_kvstore_2eproto_once,
      file_level_metadata_kvstore_2eproto[5]);
}

// ===================================================================

class KVRequest_KVDeleteRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<KVRequest_KVDeleteRequest>()._impl_._has_bits_);
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_col(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

KVRequest_KVDeleteRequest::KVRequest_KVDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KVRequest.KVDeleteRequest)
}
KVRequest_KVDeleteRequest::KVRequest_KVDeleteRequest(const KVRequest_KVDeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KVRequest_KVDeleteRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_){}
    , decltype(_impl_.col_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.row_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.row_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_row()) {
    _this->_impl_.row_.Set(from._internal_row(), 
      _this->GetArenaForAllocation());
  }
  _impl_.col_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_col()) {
    _this->_impl_.col_.Set(from._internal_col(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:KVRequest.KVDeleteRequest)
}

inline void KVRequest_KVDeleteRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_){}
    , decltype(_impl_.col_){}
  };
  _impl_.row_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.row_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.col_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KVRequest_KVDeleteRequest::~KVRequest_KVDeleteRequest() {
  // @@protoc_insertion_point(destructor:KVRequest.KVDeleteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KVRequest_KVDeleteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.row_.Destroy();
  _impl_.col_.Destroy();
}

void KVRequest_KVDeleteRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KVRequest_KVDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:KVRequest.KVDeleteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.row_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.col_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KVRequest_KVDeleteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_row();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KVRequest.KVDeleteRequest.row"));
        } else
          goto handle_unusual;
        continue;
      // optional string col = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_col();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KVRequest.KVDeleteRequest.col"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KVRequest_KVDeleteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KVRequest.KVDeleteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string row = 1;
  if (_internal_has_row()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_row().data(), static_cast<int>(this->_internal_row().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KVRequest.KVDeleteRequest.row");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_row(), target);
  }

  // optional string col = 2;
  if (_internal_has_col()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_col().data(), static_cast<int>(this->_internal_col().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KVRequest.KVDeleteRequest.col");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_col(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KVRequest.KVDeleteRequest)
  return target;
}

size_t KVRequest_KVDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KVRequest.KVDeleteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string row = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_row());
    }

    // optional string col = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_col());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KVRequest_KVDeleteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KVRequest_KVDeleteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KVRequest_KVDeleteRequest::GetClassData() const { return &_class_data_; }


void KVRequest_KVDeleteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KVRequest_KVDeleteRequest*>(&to_msg);
  auto& from = static_cast<const KVRequest_KVDeleteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KVRequest.KVDeleteRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_row(from._internal_row());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_col(from._internal_col());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KVRequest_KVDeleteRequest::CopyFrom(const KVRequest_KVDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KVRequest.KVDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVRequest_KVDeleteRequest::IsInitialized() const {
  return true;
}

void KVRequest_KVDeleteRequest::InternalSwap(KVRequest_KVDeleteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.row_, lhs_arena,
      &other->_impl_.row_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.col_, lhs_arena,
      &other->_impl_.col_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KVRequest_KVDeleteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2eproto_getter, &descriptor_table_kvstore_2eproto_once,
      file_level_metadata_kvstore_2eproto[6]);
}

// ===================================================================

class KVRequest_KVSdeleteRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<KVRequest_KVSdeleteRequest>()._impl_._has_bits_);
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_col(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

KVRequest_KVSdeleteRequest::KVRequest_KVSdeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KVRequest.KVSdeleteRequest)
}
KVRequest_KVSdeleteRequest::KVRequest_KVSdeleteRequest(const KVRequest_KVSdeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KVRequest_KVSdeleteRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_){}
    , decltype(_impl_.col_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.row_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.row_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_row()) {
    _this->_impl_.row_.Set(from._internal_row(), 
      _this->GetArenaForAllocation());
  }
  _impl_.col_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_col()) {
    _this->_impl_.col_.Set(from._internal_col(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:KVRequest.KVSdeleteRequest)
}

inline void KVRequest_KVSdeleteRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_){}
    , decltype(_impl_.col_){}
  };
  _impl_.row_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.row_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.col_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KVRequest_KVSdeleteRequest::~KVRequest_KVSdeleteRequest() {
  // @@protoc_insertion_point(destructor:KVRequest.KVSdeleteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KVRequest_KVSdeleteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.row_.Destroy();
  _impl_.col_.Destroy();
}

void KVRequest_KVSdeleteRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KVRequest_KVSdeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:KVRequest.KVSdeleteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.row_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.col_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KVRequest_KVSdeleteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_row();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KVRequest.KVSdeleteRequest.row"));
        } else
          goto handle_unusual;
        continue;
      // optional string col = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_col();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KVRequest.KVSdeleteRequest.col"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KVRequest_KVSdeleteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KVRequest.KVSdeleteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string row = 1;
  if (_internal_has_row()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_row().data(), static_cast<int>(this->_internal_row().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KVRequest.KVSdeleteRequest.row");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_row(), target);
  }

  // optional string col = 2;
  if (_internal_has_col()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_col().data(), static_cast<int>(this->_internal_col().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KVRequest.KVSdeleteRequest.col");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_col(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KVRequest.KVSdeleteRequest)
  return target;
}

size_t KVRequest_KVSdeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KVRequest.KVSdeleteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string row = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_row());
    }

    // optional string col = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_col());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KVRequest_KVSdeleteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KVRequest_KVSdeleteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KVRequest_KVSdeleteRequest::GetClassData() const { return &_class_data_; }


void KVRequest_KVSdeleteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KVRequest_KVSdeleteRequest*>(&to_msg);
  auto& from = static_cast<const KVRequest_KVSdeleteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KVRequest.KVSdeleteRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_row(from._internal_row());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_col(from._internal_col());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KVRequest_KVSdeleteRequest::CopyFrom(const KVRequest_KVSdeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KVRequest.KVSdeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVRequest_KVSdeleteRequest::IsInitialized() const {
  return true;
}

void KVRequest_KVSdeleteRequest::InternalSwap(KVRequest_KVSdeleteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.row_, lhs_arena,
      &other->_impl_.row_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.col_, lhs_arena,
      &other->_impl_.col_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KVRequest_KVSdeleteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2eproto_getter, &descriptor_table_kvstore_2eproto_once,
      file_level_metadata_kvstore_2eproto[7]);
}

// ===================================================================

class KVRequest_KVSuspendRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<KVRequest_KVSuspendRequest>()._impl_._has_bits_);
  static void set_has_target_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

KVRequest_KVSuspendRequest::KVRequest_KVSuspendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KVRequest.KVSuspendRequest)
}
KVRequest_KVSuspendRequest::KVRequest_KVSuspendRequest(const KVRequest_KVSuspendRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KVRequest_KVSuspendRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_addr_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.target_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_target_addr()) {
    _this->_impl_.target_addr_.Set(from._internal_target_addr(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:KVRequest.KVSuspendRequest)
}

inline void KVRequest_KVSuspendRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_addr_){}
  };
  _impl_.target_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KVRequest_KVSuspendRequest::~KVRequest_KVSuspendRequest() {
  // @@protoc_insertion_point(destructor:KVRequest.KVSuspendRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KVRequest_KVSuspendRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.target_addr_.Destroy();
}

void KVRequest_KVSuspendRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KVRequest_KVSuspendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:KVRequest.KVSuspendRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.target_addr_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KVRequest_KVSuspendRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string target_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_target_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KVRequest.KVSuspendRequest.target_addr"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KVRequest_KVSuspendRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KVRequest.KVSuspendRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string target_addr = 1;
  if (_internal_has_target_addr()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_addr().data(), static_cast<int>(this->_internal_target_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KVRequest.KVSuspendRequest.target_addr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KVRequest.KVSuspendRequest)
  return target;
}

size_t KVRequest_KVSuspendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KVRequest.KVSuspendRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string target_addr = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_addr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KVRequest_KVSuspendRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KVRequest_KVSuspendRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KVRequest_KVSuspendRequest::GetClassData() const { return &_class_data_; }


void KVRequest_KVSuspendRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KVRequest_KVSuspendRequest*>(&to_msg);
  auto& from = static_cast<const KVRequest_KVSuspendRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KVRequest.KVSuspendRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_target_addr()) {
    _this->_internal_set_target_addr(from._internal_target_addr());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KVRequest_KVSuspendRequest::CopyFrom(const KVRequest_KVSuspendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KVRequest.KVSuspendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVRequest_KVSuspendRequest::IsInitialized() const {
  return true;
}

void KVRequest_KVSuspendRequest::InternalSwap(KVRequest_KVSuspendRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_addr_, lhs_arena,
      &other->_impl_.target_addr_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KVRequest_KVSuspendRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2eproto_getter, &descriptor_table_kvstore_2eproto_once,
      file_level_metadata_kvstore_2eproto[8]);
}

// ===================================================================

class KVRequest_KVRecoveryRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<KVRequest_KVRecoveryRequest>()._impl_._has_bits_);
  static void set_has_target_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

KVRequest_KVRecoveryRequest::KVRequest_KVRecoveryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KVRequest.KVRecoveryRequest)
}
KVRequest_KVRecoveryRequest::KVRequest_KVRecoveryRequest(const KVRequest_KVRecoveryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KVRequest_KVRecoveryRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_addr_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.target_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_target_addr()) {
    _this->_impl_.target_addr_.Set(from._internal_target_addr(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:KVRequest.KVRecoveryRequest)
}

inline void KVRequest_KVRecoveryRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_addr_){}
  };
  _impl_.target_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KVRequest_KVRecoveryRequest::~KVRequest_KVRecoveryRequest() {
  // @@protoc_insertion_point(destructor:KVRequest.KVRecoveryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KVRequest_KVRecoveryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.target_addr_.Destroy();
}

void KVRequest_KVRecoveryRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KVRequest_KVRecoveryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:KVRequest.KVRecoveryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.target_addr_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KVRequest_KVRecoveryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string target_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_target_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KVRequest.KVRecoveryRequest.target_addr"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KVRequest_KVRecoveryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KVRequest.KVRecoveryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string target_addr = 1;
  if (_internal_has_target_addr()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_addr().data(), static_cast<int>(this->_internal_target_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KVRequest.KVRecoveryRequest.target_addr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KVRequest.KVRecoveryRequest)
  return target;
}

size_t KVRequest_KVRecoveryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KVRequest.KVRecoveryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string target_addr = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_addr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KVRequest_KVRecoveryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KVRequest_KVRecoveryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KVRequest_KVRecoveryRequest::GetClassData() const { return &_class_data_; }


void KVRequest_KVRecoveryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KVRequest_KVRecoveryRequest*>(&to_msg);
  auto& from = static_cast<const KVRequest_KVRecoveryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KVRequest.KVRecoveryRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_target_addr()) {
    _this->_internal_set_target_addr(from._internal_target_addr());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KVRequest_KVRecoveryRequest::CopyFrom(const KVRequest_KVRecoveryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KVRequest.KVRecoveryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVRequest_KVRecoveryRequest::IsInitialized() const {
  return true;
}

void KVRequest_KVRecoveryRequest::InternalSwap(KVRequest_KVRecoveryRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_addr_, lhs_arena,
      &other->_impl_.target_addr_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KVRequest_KVRecoveryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2eproto_getter, &descriptor_table_kvstore_2eproto_once,
      file_level_metadata_kvstore_2eproto[9]);
}

// ===================================================================

class KVRequest_KVFiletransferRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<KVRequest_KVFiletransferRequest>()._impl_._has_bits_);
  static void set_has_file_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tablet_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_content(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

KVRequest_KVFiletransferRequest::KVRequest_KVFiletransferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KVRequest.KVFiletransferRequest)
}
KVRequest_KVFiletransferRequest::KVRequest_KVFiletransferRequest(const KVRequest_KVFiletransferRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KVRequest_KVFiletransferRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.content_){}
    , decltype(_impl_.file_type_){}
    , decltype(_impl_.tablet_idx_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_content()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.file_type_, &from._impl_.file_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tablet_idx_) -
    reinterpret_cast<char*>(&_impl_.file_type_)) + sizeof(_impl_.tablet_idx_));
  // @@protoc_insertion_point(copy_constructor:KVRequest.KVFiletransferRequest)
}

inline void KVRequest_KVFiletransferRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.content_){}
    , decltype(_impl_.file_type_){0}
    , decltype(_impl_.tablet_idx_){0}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KVRequest_KVFiletransferRequest::~KVRequest_KVFiletransferRequest() {
  // @@protoc_insertion_point(destructor:KVRequest.KVFiletransferRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KVRequest_KVFiletransferRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void KVRequest_KVFiletransferRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KVRequest_KVFiletransferRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:KVRequest.KVFiletransferRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.content_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.file_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tablet_idx_) -
        reinterpret_cast<char*>(&_impl_.file_type_)) + sizeof(_impl_.tablet_idx_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KVRequest_KVFiletransferRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .FileType file_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_file_type(static_cast<::FileType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional int32 tablet_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tablet_idx(&has_bits);
          _impl_.tablet_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KVRequest.KVFiletransferRequest.content"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KVRequest_KVFiletransferRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KVRequest.KVFiletransferRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .FileType file_type = 1;
  if (_internal_has_file_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_file_type(), target);
  }

  // optional int32 tablet_idx = 2;
  if (_internal_has_tablet_idx()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_tablet_idx(), target);
  }

  // optional string content = 3;
  if (_internal_has_content()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KVRequest.KVFiletransferRequest.content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KVRequest.KVFiletransferRequest)
  return target;
}

size_t KVRequest_KVFiletransferRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KVRequest.KVFiletransferRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string content = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_content());
    }

    // optional .FileType file_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_file_type());
    }

    // optional int32 tablet_idx = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tablet_idx());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KVRequest_KVFiletransferRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KVRequest_KVFiletransferRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KVRequest_KVFiletransferRequest::GetClassData() const { return &_class_data_; }


void KVRequest_KVFiletransferRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KVRequest_KVFiletransferRequest*>(&to_msg);
  auto& from = static_cast<const KVRequest_KVFiletransferRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KVRequest.KVFiletransferRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_content(from._internal_content());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.file_type_ = from._impl_.file_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tablet_idx_ = from._impl_.tablet_idx_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KVRequest_KVFiletransferRequest::CopyFrom(const KVRequest_KVFiletransferRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KVRequest.KVFiletransferRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVRequest_KVFiletransferRequest::IsInitialized() const {
  return true;
}

void KVRequest_KVFiletransferRequest::InternalSwap(KVRequest_KVFiletransferRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KVRequest_KVFiletransferRequest, _impl_.tablet_idx_)
      + sizeof(KVRequest_KVFiletransferRequest::_impl_.tablet_idx_)
      - PROTOBUF_FIELD_OFFSET(KVRequest_KVFiletransferRequest, _impl_.file_type_)>(
          reinterpret_cast<char*>(&_impl_.file_type_),
          reinterpret_cast<char*>(&other->_impl_.file_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KVRequest_KVFiletransferRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2eproto_getter, &descriptor_table_kvstore_2eproto_once,
      file_level_metadata_kvstore_2eproto[10]);
}

// ===================================================================

class KVRequest_KVReplayRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<KVRequest_KVReplayRequest>()._impl_._has_bits_);
  static void set_has_tablet_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tablet_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

KVRequest_KVReplayRequest::KVRequest_KVReplayRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KVRequest.KVReplayRequest)
}
KVRequest_KVReplayRequest::KVRequest_KVReplayRequest(const KVRequest_KVReplayRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KVRequest_KVReplayRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tablet_target_){}
    , decltype(_impl_.tablet_num_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tablet_target_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tablet_target_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tablet_target()) {
    _this->_impl_.tablet_target_.Set(from._internal_tablet_target(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.tablet_num_ = from._impl_.tablet_num_;
  // @@protoc_insertion_point(copy_constructor:KVRequest.KVReplayRequest)
}

inline void KVRequest_KVReplayRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tablet_target_){}
    , decltype(_impl_.tablet_num_){0}
  };
  _impl_.tablet_target_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tablet_target_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KVRequest_KVReplayRequest::~KVRequest_KVReplayRequest() {
  // @@protoc_insertion_point(destructor:KVRequest.KVReplayRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KVRequest_KVReplayRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tablet_target_.Destroy();
}

void KVRequest_KVReplayRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KVRequest_KVReplayRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:KVRequest.KVReplayRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.tablet_target_.ClearNonDefaultToEmpty();
  }
  _impl_.tablet_num_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KVRequest_KVReplayRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 tablet_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tablet_num(&has_bits);
          _impl_.tablet_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tablet_target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tablet_target();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KVRequest.KVReplayRequest.tablet_target"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KVRequest_KVReplayRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KVRequest.KVReplayRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 tablet_num = 1;
  if (_internal_has_tablet_num()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_tablet_num(), target);
  }

  // optional string tablet_target = 2;
  if (_internal_has_tablet_target()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tablet_target().data(), static_cast<int>(this->_internal_tablet_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KVRequest.KVReplayRequest.tablet_target");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tablet_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KVRequest.KVReplayRequest)
  return target;
}

size_t KVRequest_KVReplayRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KVRequest.KVReplayRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string tablet_target = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tablet_target());
    }

    // optional int32 tablet_num = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tablet_num());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KVRequest_KVReplayRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KVRequest_KVReplayRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KVRequest_KVReplayRequest::GetClassData() const { return &_class_data_; }


void KVRequest_KVReplayRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KVRequest_KVReplayRequest*>(&to_msg);
  auto& from = static_cast<const KVRequest_KVReplayRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KVRequest.KVReplayRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_tablet_target(from._internal_tablet_target());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tablet_num_ = from._impl_.tablet_num_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KVRequest_KVReplayRequest::CopyFrom(const KVRequest_KVReplayRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KVRequest.KVReplayRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVRequest_KVReplayRequest::IsInitialized() const {
  return true;
}

void KVRequest_KVReplayRequest::InternalSwap(KVRequest_KVReplayRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tablet_target_, lhs_arena,
      &other->_impl_.tablet_target_, rhs_arena
  );
  swap(_impl_.tablet_num_, other->_impl_.tablet_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KVRequest_KVReplayRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2eproto_getter, &descriptor_table_kvstore_2eproto_once,
      file_level_metadata_kvstore_2eproto[11]);
}

// ===================================================================

class KVRequest::_Internal {
 public:
  static const ::KVRequest_KVGetRequest& get_request(const KVRequest* msg);
  static const ::KVRequest_KVSgetRequest& sget_request(const KVRequest* msg);
  static const ::KVRequest_KVPutRequest& put_request(const KVRequest* msg);
  static const ::KVRequest_KVSputRequest& sput_request(const KVRequest* msg);
  static const ::KVRequest_KVCPutRequest& cput_request(const KVRequest* msg);
  static const ::KVRequest_KVScputRequest& scput_request(const KVRequest* msg);
  static const ::KVRequest_KVDeleteRequest& delete_request(const KVRequest* msg);
  static const ::KVRequest_KVSdeleteRequest& sdelete_request(const KVRequest* msg);
  static const ::KVRequest_KVSuspendRequest& suspend_request(const KVRequest* msg);
  static const ::KVRequest_KVRecoveryRequest& recovery_request(const KVRequest* msg);
  static const ::KVRequest_KVFiletransferRequest& filetransfer_request(const KVRequest* msg);
  static const ::KVRequest_KVReplayRequest& replay_request(const KVRequest* msg);
};

const ::KVRequest_KVGetRequest&
KVRequest::_Internal::get_request(const KVRequest* msg) {
  return *msg->_impl_.request_.get_request_;
}
const ::KVRequest_KVSgetRequest&
KVRequest::_Internal::sget_request(const KVRequest* msg) {
  return *msg->_impl_.request_.sget_request_;
}
const ::KVRequest_KVPutRequest&
KVRequest::_Internal::put_request(const KVRequest* msg) {
  return *msg->_impl_.request_.put_request_;
}
const ::KVRequest_KVSputRequest&
KVRequest::_Internal::sput_request(const KVRequest* msg) {
  return *msg->_impl_.request_.sput_request_;
}
const ::KVRequest_KVCPutRequest&
KVRequest::_Internal::cput_request(const KVRequest* msg) {
  return *msg->_impl_.request_.cput_request_;
}
const ::KVRequest_KVScputRequest&
KVRequest::_Internal::scput_request(const KVRequest* msg) {
  return *msg->_impl_.request_.scput_request_;
}
const ::KVRequest_KVDeleteRequest&
KVRequest::_Internal::delete_request(const KVRequest* msg) {
  return *msg->_impl_.request_.delete_request_;
}
const ::KVRequest_KVSdeleteRequest&
KVRequest::_Internal::sdelete_request(const KVRequest* msg) {
  return *msg->_impl_.request_.sdelete_request_;
}
const ::KVRequest_KVSuspendRequest&
KVRequest::_Internal::suspend_request(const KVRequest* msg) {
  return *msg->_impl_.request_.suspend_request_;
}
const ::KVRequest_KVRecoveryRequest&
KVRequest::_Internal::recovery_request(const KVRequest* msg) {
  return *msg->_impl_.request_.recovery_request_;
}
const ::KVRequest_KVFiletransferRequest&
KVRequest::_Internal::filetransfer_request(const KVRequest* msg) {
  return *msg->_impl_.request_.filetransfer_request_;
}
const ::KVRequest_KVReplayRequest&
KVRequest::_Internal::replay_request(const KVRequest* msg) {
  return *msg->_impl_.request_.replay_request_;
}
void KVRequest::set_allocated_get_request(::KVRequest_KVGetRequest* get_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (get_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_request);
    if (message_arena != submessage_arena) {
      get_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_request, submessage_arena);
    }
    set_has_get_request();
    _impl_.request_.get_request_ = get_request;
  }
  // @@protoc_insertion_point(field_set_allocated:KVRequest.get_request)
}
void KVRequest::set_allocated_sget_request(::KVRequest_KVSgetRequest* sget_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (sget_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sget_request);
    if (message_arena != submessage_arena) {
      sget_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sget_request, submessage_arena);
    }
    set_has_sget_request();
    _impl_.request_.sget_request_ = sget_request;
  }
  // @@protoc_insertion_point(field_set_allocated:KVRequest.sget_request)
}
void KVRequest::set_allocated_put_request(::KVRequest_KVPutRequest* put_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (put_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(put_request);
    if (message_arena != submessage_arena) {
      put_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, put_request, submessage_arena);
    }
    set_has_put_request();
    _impl_.request_.put_request_ = put_request;
  }
  // @@protoc_insertion_point(field_set_allocated:KVRequest.put_request)
}
void KVRequest::set_allocated_sput_request(::KVRequest_KVSputRequest* sput_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (sput_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sput_request);
    if (message_arena != submessage_arena) {
      sput_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sput_request, submessage_arena);
    }
    set_has_sput_request();
    _impl_.request_.sput_request_ = sput_request;
  }
  // @@protoc_insertion_point(field_set_allocated:KVRequest.sput_request)
}
void KVRequest::set_allocated_cput_request(::KVRequest_KVCPutRequest* cput_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (cput_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cput_request);
    if (message_arena != submessage_arena) {
      cput_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cput_request, submessage_arena);
    }
    set_has_cput_request();
    _impl_.request_.cput_request_ = cput_request;
  }
  // @@protoc_insertion_point(field_set_allocated:KVRequest.cput_request)
}
void KVRequest::set_allocated_scput_request(::KVRequest_KVScputRequest* scput_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (scput_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scput_request);
    if (message_arena != submessage_arena) {
      scput_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scput_request, submessage_arena);
    }
    set_has_scput_request();
    _impl_.request_.scput_request_ = scput_request;
  }
  // @@protoc_insertion_point(field_set_allocated:KVRequest.scput_request)
}
void KVRequest::set_allocated_delete_request(::KVRequest_KVDeleteRequest* delete_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (delete_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(delete_request);
    if (message_arena != submessage_arena) {
      delete_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_request, submessage_arena);
    }
    set_has_delete_request();
    _impl_.request_.delete_request_ = delete_request;
  }
  // @@protoc_insertion_point(field_set_allocated:KVRequest.delete_request)
}
void KVRequest::set_allocated_sdelete_request(::KVRequest_KVSdeleteRequest* sdelete_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (sdelete_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sdelete_request);
    if (message_arena != submessage_arena) {
      sdelete_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sdelete_request, submessage_arena);
    }
    set_has_sdelete_request();
    _impl_.request_.sdelete_request_ = sdelete_request;
  }
  // @@protoc_insertion_point(field_set_allocated:KVRequest.sdelete_request)
}
void KVRequest::set_allocated_suspend_request(::KVRequest_KVSuspendRequest* suspend_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (suspend_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(suspend_request);
    if (message_arena != submessage_arena) {
      suspend_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, suspend_request, submessage_arena);
    }
    set_has_suspend_request();
    _impl_.request_.suspend_request_ = suspend_request;
  }
  // @@protoc_insertion_point(field_set_allocated:KVRequest.suspend_request)
}
void KVRequest::set_allocated_recovery_request(::KVRequest_KVRecoveryRequest* recovery_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (recovery_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(recovery_request);
    if (message_arena != submessage_arena) {
      recovery_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recovery_request, submessage_arena);
    }
    set_has_recovery_request();
    _impl_.request_.recovery_request_ = recovery_request;
  }
  // @@protoc_insertion_point(field_set_allocated:KVRequest.recovery_request)
}
void KVRequest::set_allocated_filetransfer_request(::KVRequest_KVFiletransferRequest* filetransfer_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (filetransfer_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(filetransfer_request);
    if (message_arena != submessage_arena) {
      filetransfer_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filetransfer_request, submessage_arena);
    }
    set_has_filetransfer_request();
    _impl_.request_.filetransfer_request_ = filetransfer_request;
  }
  // @@protoc_insertion_point(field_set_allocated:KVRequest.filetransfer_request)
}
void KVRequest::set_allocated_replay_request(::KVRequest_KVReplayRequest* replay_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (replay_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(replay_request);
    if (message_arena != submessage_arena) {
      replay_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replay_request, submessage_arena);
    }
    set_has_replay_request();
    _impl_.request_.replay_request_ = replay_request;
  }
  // @@protoc_insertion_point(field_set_allocated:KVRequest.replay_request)
}
KVRequest::KVRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KVRequest)
}
KVRequest::KVRequest(const KVRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KVRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_request();
  switch (from.request_case()) {
    case kGetRequest: {
      _this->_internal_mutable_get_request()->::KVRequest_KVGetRequest::MergeFrom(
          from._internal_get_request());
      break;
    }
    case kSgetRequest: {
      _this->_internal_mutable_sget_request()->::KVRequest_KVSgetRequest::MergeFrom(
          from._internal_sget_request());
      break;
    }
    case kPutRequest: {
      _this->_internal_mutable_put_request()->::KVRequest_KVPutRequest::MergeFrom(
          from._internal_put_request());
      break;
    }
    case kSputRequest: {
      _this->_internal_mutable_sput_request()->::KVRequest_KVSputRequest::MergeFrom(
          from._internal_sput_request());
      break;
    }
    case kCputRequest: {
      _this->_internal_mutable_cput_request()->::KVRequest_KVCPutRequest::MergeFrom(
          from._internal_cput_request());
      break;
    }
    case kScputRequest: {
      _this->_internal_mutable_scput_request()->::KVRequest_KVScputRequest::MergeFrom(
          from._internal_scput_request());
      break;
    }
    case kDeleteRequest: {
      _this->_internal_mutable_delete_request()->::KVRequest_KVDeleteRequest::MergeFrom(
          from._internal_delete_request());
      break;
    }
    case kSdeleteRequest: {
      _this->_internal_mutable_sdelete_request()->::KVRequest_KVSdeleteRequest::MergeFrom(
          from._internal_sdelete_request());
      break;
    }
    case kSuspendRequest: {
      _this->_internal_mutable_suspend_request()->::KVRequest_KVSuspendRequest::MergeFrom(
          from._internal_suspend_request());
      break;
    }
    case kRecoveryRequest: {
      _this->_internal_mutable_recovery_request()->::KVRequest_KVRecoveryRequest::MergeFrom(
          from._internal_recovery_request());
      break;
    }
    case kFiletransferRequest: {
      _this->_internal_mutable_filetransfer_request()->::KVRequest_KVFiletransferRequest::MergeFrom(
          from._internal_filetransfer_request());
      break;
    }
    case kReplayRequest: {
      _this->_internal_mutable_replay_request()->::KVRequest_KVReplayRequest::MergeFrom(
          from._internal_replay_request());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:KVRequest)
}

inline void KVRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_request();
}

KVRequest::~KVRequest() {
  // @@protoc_insertion_point(destructor:KVRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KVRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_request()) {
    clear_request();
  }
}

void KVRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KVRequest::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:KVRequest)
  switch (request_case()) {
    case kGetRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.get_request_;
      }
      break;
    }
    case kSgetRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.sget_request_;
      }
      break;
    }
    case kPutRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.put_request_;
      }
      break;
    }
    case kSputRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.sput_request_;
      }
      break;
    }
    case kCputRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.cput_request_;
      }
      break;
    }
    case kScputRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.scput_request_;
      }
      break;
    }
    case kDeleteRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.delete_request_;
      }
      break;
    }
    case kSdeleteRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.sdelete_request_;
      }
      break;
    }
    case kSuspendRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.suspend_request_;
      }
      break;
    }
    case kRecoveryRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.recovery_request_;
      }
      break;
    }
    case kFiletransferRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.filetransfer_request_;
      }
      break;
    }
    case kReplayRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.replay_request_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REQUEST_NOT_SET;
}


void KVRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:KVRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KVRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KVRequest.KVGetRequest get_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .KVRequest.KVSgetRequest sget_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sget_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .KVRequest.KVPutRequest put_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_put_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .KVRequest.KVSputRequest sput_request = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sput_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .KVRequest.KVCPutRequest cput_request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cput_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .KVRequest.KVScputRequest scput_request = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_scput_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .KVRequest.KVDeleteRequest delete_request = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .KVRequest.KVSdeleteRequest sdelete_request = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_sdelete_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .KVRequest.KVSuspendRequest suspend_request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_suspend_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .KVRequest.KVRecoveryRequest recovery_request = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_recovery_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .KVRequest.KVFiletransferRequest filetransfer_request = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_filetransfer_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .KVRequest.KVReplayRequest replay_request = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_replay_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KVRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KVRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .KVRequest.KVGetRequest get_request = 1;
  if (_internal_has_get_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::get_request(this),
        _Internal::get_request(this).GetCachedSize(), target, stream);
  }

  // .KVRequest.KVSgetRequest sget_request = 2;
  if (_internal_has_sget_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sget_request(this),
        _Internal::sget_request(this).GetCachedSize(), target, stream);
  }

  // .KVRequest.KVPutRequest put_request = 3;
  if (_internal_has_put_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::put_request(this),
        _Internal::put_request(this).GetCachedSize(), target, stream);
  }

  // .KVRequest.KVSputRequest sput_request = 4;
  if (_internal_has_sput_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::sput_request(this),
        _Internal::sput_request(this).GetCachedSize(), target, stream);
  }

  // .KVRequest.KVCPutRequest cput_request = 5;
  if (_internal_has_cput_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::cput_request(this),
        _Internal::cput_request(this).GetCachedSize(), target, stream);
  }

  // .KVRequest.KVScputRequest scput_request = 6;
  if (_internal_has_scput_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::scput_request(this),
        _Internal::scput_request(this).GetCachedSize(), target, stream);
  }

  // .KVRequest.KVDeleteRequest delete_request = 7;
  if (_internal_has_delete_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::delete_request(this),
        _Internal::delete_request(this).GetCachedSize(), target, stream);
  }

  // .KVRequest.KVSdeleteRequest sdelete_request = 8;
  if (_internal_has_sdelete_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::sdelete_request(this),
        _Internal::sdelete_request(this).GetCachedSize(), target, stream);
  }

  // .KVRequest.KVSuspendRequest suspend_request = 9;
  if (_internal_has_suspend_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::suspend_request(this),
        _Internal::suspend_request(this).GetCachedSize(), target, stream);
  }

  // .KVRequest.KVRecoveryRequest recovery_request = 10;
  if (_internal_has_recovery_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::recovery_request(this),
        _Internal::recovery_request(this).GetCachedSize(), target, stream);
  }

  // .KVRequest.KVFiletransferRequest filetransfer_request = 12;
  if (_internal_has_filetransfer_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::filetransfer_request(this),
        _Internal::filetransfer_request(this).GetCachedSize(), target, stream);
  }

  // .KVRequest.KVReplayRequest replay_request = 13;
  if (_internal_has_replay_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::replay_request(this),
        _Internal::replay_request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KVRequest)
  return target;
}

size_t KVRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KVRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (request_case()) {
    // .KVRequest.KVGetRequest get_request = 1;
    case kGetRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.get_request_);
      break;
    }
    // .KVRequest.KVSgetRequest sget_request = 2;
    case kSgetRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.sget_request_);
      break;
    }
    // .KVRequest.KVPutRequest put_request = 3;
    case kPutRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.put_request_);
      break;
    }
    // .KVRequest.KVSputRequest sput_request = 4;
    case kSputRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.sput_request_);
      break;
    }
    // .KVRequest.KVCPutRequest cput_request = 5;
    case kCputRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.cput_request_);
      break;
    }
    // .KVRequest.KVScputRequest scput_request = 6;
    case kScputRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.scput_request_);
      break;
    }
    // .KVRequest.KVDeleteRequest delete_request = 7;
    case kDeleteRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.delete_request_);
      break;
    }
    // .KVRequest.KVSdeleteRequest sdelete_request = 8;
    case kSdeleteRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.sdelete_request_);
      break;
    }
    // .KVRequest.KVSuspendRequest suspend_request = 9;
    case kSuspendRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.suspend_request_);
      break;
    }
    // .KVRequest.KVRecoveryRequest recovery_request = 10;
    case kRecoveryRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.recovery_request_);
      break;
    }
    // .KVRequest.KVFiletransferRequest filetransfer_request = 12;
    case kFiletransferRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.filetransfer_request_);
      break;
    }
    // .KVRequest.KVReplayRequest replay_request = 13;
    case kReplayRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.replay_request_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KVRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KVRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KVRequest::GetClassData() const { return &_class_data_; }


void KVRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KVRequest*>(&to_msg);
  auto& from = static_cast<const KVRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KVRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.request_case()) {
    case kGetRequest: {
      _this->_internal_mutable_get_request()->::KVRequest_KVGetRequest::MergeFrom(
          from._internal_get_request());
      break;
    }
    case kSgetRequest: {
      _this->_internal_mutable_sget_request()->::KVRequest_KVSgetRequest::MergeFrom(
          from._internal_sget_request());
      break;
    }
    case kPutRequest: {
      _this->_internal_mutable_put_request()->::KVRequest_KVPutRequest::MergeFrom(
          from._internal_put_request());
      break;
    }
    case kSputRequest: {
      _this->_internal_mutable_sput_request()->::KVRequest_KVSputRequest::MergeFrom(
          from._internal_sput_request());
      break;
    }
    case kCputRequest: {
      _this->_internal_mutable_cput_request()->::KVRequest_KVCPutRequest::MergeFrom(
          from._internal_cput_request());
      break;
    }
    case kScputRequest: {
      _this->_internal_mutable_scput_request()->::KVRequest_KVScputRequest::MergeFrom(
          from._internal_scput_request());
      break;
    }
    case kDeleteRequest: {
      _this->_internal_mutable_delete_request()->::KVRequest_KVDeleteRequest::MergeFrom(
          from._internal_delete_request());
      break;
    }
    case kSdeleteRequest: {
      _this->_internal_mutable_sdelete_request()->::KVRequest_KVSdeleteRequest::MergeFrom(
          from._internal_sdelete_request());
      break;
    }
    case kSuspendRequest: {
      _this->_internal_mutable_suspend_request()->::KVRequest_KVSuspendRequest::MergeFrom(
          from._internal_suspend_request());
      break;
    }
    case kRecoveryRequest: {
      _this->_internal_mutable_recovery_request()->::KVRequest_KVRecoveryRequest::MergeFrom(
          from._internal_recovery_request());
      break;
    }
    case kFiletransferRequest: {
      _this->_internal_mutable_filetransfer_request()->::KVRequest_KVFiletransferRequest::MergeFrom(
          from._internal_filetransfer_request());
      break;
    }
    case kReplayRequest: {
      _this->_internal_mutable_replay_request()->::KVRequest_KVReplayRequest::MergeFrom(
          from._internal_replay_request());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KVRequest::CopyFrom(const KVRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KVRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVRequest::IsInitialized() const {
  return true;
}

void KVRequest::InternalSwap(KVRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.request_, other->_impl_.request_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata KVRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2eproto_getter, &descriptor_table_kvstore_2eproto_once,
      file_level_metadata_kvstore_2eproto[12]);
}

// ===================================================================

class KVResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<KVResponse>()._impl_._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

KVResponse::KVResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KVResponse)
}
KVResponse::KVResponse(const KVResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KVResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:KVResponse)
}

inline void KVResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.status_){0}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KVResponse::~KVResponse() {
  // @@protoc_insertion_point(destructor:KVResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KVResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void KVResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KVResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:KVResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.message_.ClearNonDefaultToEmpty();
  }
  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KVResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .KVStatusCode status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::KVStatusCode>(val));
        } else
          goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KVResponse.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KVResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KVResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .KVStatusCode status = 1;
  if (_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // optional string message = 2;
  if (_internal_has_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KVResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KVResponse)
  return target;
}

size_t KVResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KVResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional .KVStatusCode status = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KVResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KVResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KVResponse::GetClassData() const { return &_class_data_; }


void KVResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KVResponse*>(&to_msg);
  auto& from = static_cast<const KVResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KVResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KVResponse::CopyFrom(const KVResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KVResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVResponse::IsInitialized() const {
  return true;
}

void KVResponse::InternalSwap(KVResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KVResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2eproto_getter, &descriptor_table_kvstore_2eproto_once,
      file_level_metadata_kvstore_2eproto[13]);
}

// ===================================================================

class FetchNodeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<FetchNodeRequest>()._impl_._has_bits_);
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_col(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FetchNodeRequest::FetchNodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:FetchNodeRequest)
}
FetchNodeRequest::FetchNodeRequest(const FetchNodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FetchNodeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_){}
    , decltype(_impl_.col_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.row_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.row_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_row()) {
    _this->_impl_.row_.Set(from._internal_row(), 
      _this->GetArenaForAllocation());
  }
  _impl_.col_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_col()) {
    _this->_impl_.col_.Set(from._internal_col(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:FetchNodeRequest)
}

inline void FetchNodeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_){}
    , decltype(_impl_.col_){}
  };
  _impl_.row_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.row_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.col_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FetchNodeRequest::~FetchNodeRequest() {
  // @@protoc_insertion_point(destructor:FetchNodeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FetchNodeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.row_.Destroy();
  _impl_.col_.Destroy();
}

void FetchNodeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FetchNodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:FetchNodeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.row_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.col_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchNodeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_row();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FetchNodeRequest.row"));
        } else
          goto handle_unusual;
        continue;
      // optional string col = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_col();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FetchNodeRequest.col"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FetchNodeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FetchNodeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string row = 1;
  if (_internal_has_row()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_row().data(), static_cast<int>(this->_internal_row().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FetchNodeRequest.row");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_row(), target);
  }

  // optional string col = 2;
  if (_internal_has_col()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_col().data(), static_cast<int>(this->_internal_col().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FetchNodeRequest.col");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_col(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FetchNodeRequest)
  return target;
}

size_t FetchNodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FetchNodeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string row = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_row());
    }

    // optional string col = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_col());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FetchNodeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FetchNodeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FetchNodeRequest::GetClassData() const { return &_class_data_; }


void FetchNodeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FetchNodeRequest*>(&to_msg);
  auto& from = static_cast<const FetchNodeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:FetchNodeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_row(from._internal_row());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_col(from._internal_col());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FetchNodeRequest::CopyFrom(const FetchNodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FetchNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchNodeRequest::IsInitialized() const {
  return true;
}

void FetchNodeRequest::InternalSwap(FetchNodeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.row_, lhs_arena,
      &other->_impl_.row_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.col_, lhs_arena,
      &other->_impl_.col_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchNodeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2eproto_getter, &descriptor_table_kvstore_2eproto_once,
      file_level_metadata_kvstore_2eproto[14]);
}

// ===================================================================

class FetchNodeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<FetchNodeResponse>()._impl_._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_error_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FetchNodeResponse::FetchNodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:FetchNodeResponse)
}
FetchNodeResponse::FetchNodeResponse(const FetchNodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FetchNodeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.addr_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_addr()) {
    _this->_impl_.addr_.Set(from._internal_addr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error_message()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:FetchNodeResponse)
}

inline void FetchNodeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.addr_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.status_){0}
  };
  _impl_.addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FetchNodeResponse::~FetchNodeResponse() {
  // @@protoc_insertion_point(destructor:FetchNodeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FetchNodeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.addr_.Destroy();
  _impl_.error_message_.Destroy();
}

void FetchNodeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FetchNodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:FetchNodeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.addr_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.error_message_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchNodeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .KVStatusCode status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::KVStatusCode>(val));
        } else
          goto handle_unusual;
        continue;
      // optional string addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FetchNodeResponse.addr"));
        } else
          goto handle_unusual;
        continue;
      // optional string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FetchNodeResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FetchNodeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FetchNodeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .KVStatusCode status = 1;
  if (_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // optional string addr = 2;
  if (_internal_has_addr()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FetchNodeResponse.addr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_addr(), target);
  }

  // optional string error_message = 3;
  if (_internal_has_error_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FetchNodeResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FetchNodeResponse)
  return target;
}

size_t FetchNodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FetchNodeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string addr = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_addr());
    }

    // optional string error_message = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error_message());
    }

    // optional .KVStatusCode status = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FetchNodeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FetchNodeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FetchNodeResponse::GetClassData() const { return &_class_data_; }


void FetchNodeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FetchNodeResponse*>(&to_msg);
  auto& from = static_cast<const FetchNodeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:FetchNodeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_addr(from._internal_addr());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_error_message(from._internal_error_message());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FetchNodeResponse::CopyFrom(const FetchNodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FetchNodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchNodeResponse::IsInitialized() const {
  return true;
}

void FetchNodeResponse::InternalSwap(FetchNodeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.addr_, lhs_arena,
      &other->_impl_.addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchNodeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2eproto_getter, &descriptor_table_kvstore_2eproto_once,
      file_level_metadata_kvstore_2eproto[15]);
}

// ===================================================================

class PollStatusRequest::_Internal {
 public:
};

PollStatusRequest::PollStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:PollStatusRequest)
}
PollStatusRequest::PollStatusRequest(const PollStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PollStatusRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PollStatusRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PollStatusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PollStatusRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PollStatusRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2eproto_getter, &descriptor_table_kvstore_2eproto_once,
      file_level_metadata_kvstore_2eproto[16]);
}

// ===================================================================

class PollStatusResponse_Cluster_Node::_Internal {
 public:
  using HasBits = decltype(std::declval<PollStatusResponse_Cluster_Node>()._impl_._has_bits_);
  static void set_has_is_primary(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PollStatusResponse_Cluster_Node::PollStatusResponse_Cluster_Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PollStatusResponse.Cluster.Node)
}
PollStatusResponse_Cluster_Node::PollStatusResponse_Cluster_Node(const PollStatusResponse_Cluster_Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PollStatusResponse_Cluster_Node* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.is_primary_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_address()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_state()) {
    _this->_impl_.state_.Set(from._internal_state(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.is_primary_ = from._impl_.is_primary_;
  // @@protoc_insertion_point(copy_constructor:PollStatusResponse.Cluster.Node)
}

inline void PollStatusResponse_Cluster_Node::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.is_primary_){false}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PollStatusResponse_Cluster_Node::~PollStatusResponse_Cluster_Node() {
  // @@protoc_insertion_point(destructor:PollStatusResponse.Cluster.Node)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PollStatusResponse_Cluster_Node::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  _impl_.state_.Destroy();
}

void PollStatusResponse_Cluster_Node::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PollStatusResponse_Cluster_Node::Clear() {
// @@protoc_insertion_point(message_clear_start:PollStatusResponse.Cluster.Node)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.state_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.is_primary_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PollStatusResponse_Cluster_Node::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_primary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_primary(&has_bits);
          _impl_.is_primary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PollStatusResponse.Cluster.Node.address"));
        } else
          goto handle_unusual;
        continue;
      // optional string state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PollStatusResponse.Cluster.Node.state"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PollStatusResponse_Cluster_Node::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PollStatusResponse.Cluster.Node)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool is_primary = 1;
  if (_internal_has_is_primary()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_primary(), target);
  }

  // optional string address = 2;
  if (_internal_has_address()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PollStatusResponse.Cluster.Node.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  // optional string state = 3;
  if (_internal_has_state()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PollStatusResponse.Cluster.Node.state");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PollStatusResponse.Cluster.Node)
  return target;
}

size_t PollStatusResponse_Cluster_Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PollStatusResponse.Cluster.Node)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string address = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_address());
    }

    // optional string state = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_state());
    }

    // optional bool is_primary = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PollStatusResponse_Cluster_Node::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PollStatusResponse_Cluster_Node::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PollStatusResponse_Cluster_Node::GetClassData() const { return &_class_data_; }


void PollStatusResponse_Cluster_Node::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PollStatusResponse_Cluster_Node*>(&to_msg);
  auto& from = static_cast<const PollStatusResponse_Cluster_Node&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PollStatusResponse.Cluster.Node)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_address(from._internal_address());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_state(from._internal_state());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_primary_ = from._impl_.is_primary_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PollStatusResponse_Cluster_Node::CopyFrom(const PollStatusResponse_Cluster_Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PollStatusResponse.Cluster.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PollStatusResponse_Cluster_Node::IsInitialized() const {
  return true;
}

void PollStatusResponse_Cluster_Node::InternalSwap(PollStatusResponse_Cluster_Node* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.state_, lhs_arena,
      &other->_impl_.state_, rhs_arena
  );
  swap(_impl_.is_primary_, other->_impl_.is_primary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PollStatusResponse_Cluster_Node::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2eproto_getter, &descriptor_table_kvstore_2eproto_once,
      file_level_metadata_kvstore_2eproto[17]);
}

// ===================================================================

class PollStatusResponse_Cluster::_Internal {
 public:
};

PollStatusResponse_Cluster::PollStatusResponse_Cluster(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PollStatusResponse.Cluster)
}
PollStatusResponse_Cluster::PollStatusResponse_Cluster(const PollStatusResponse_Cluster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PollStatusResponse_Cluster* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nodes_){from._impl_.nodes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PollStatusResponse.Cluster)
}

inline void PollStatusResponse_Cluster::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nodes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PollStatusResponse_Cluster::~PollStatusResponse_Cluster() {
  // @@protoc_insertion_point(destructor:PollStatusResponse.Cluster)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PollStatusResponse_Cluster::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nodes_.~RepeatedPtrField();
}

void PollStatusResponse_Cluster::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PollStatusResponse_Cluster::Clear() {
// @@protoc_insertion_point(message_clear_start:PollStatusResponse.Cluster)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PollStatusResponse_Cluster::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PollStatusResponse.Cluster.Node nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PollStatusResponse_Cluster::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PollStatusResponse.Cluster)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PollStatusResponse.Cluster.Node nodes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PollStatusResponse.Cluster)
  return target;
}

size_t PollStatusResponse_Cluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PollStatusResponse.Cluster)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PollStatusResponse.Cluster.Node nodes = 1;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->_impl_.nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PollStatusResponse_Cluster::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PollStatusResponse_Cluster::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PollStatusResponse_Cluster::GetClassData() const { return &_class_data_; }


void PollStatusResponse_Cluster::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PollStatusResponse_Cluster*>(&to_msg);
  auto& from = static_cast<const PollStatusResponse_Cluster&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PollStatusResponse.Cluster)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nodes_.MergeFrom(from._impl_.nodes_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PollStatusResponse_Cluster::CopyFrom(const PollStatusResponse_Cluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PollStatusResponse.Cluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PollStatusResponse_Cluster::IsInitialized() const {
  return true;
}

void PollStatusResponse_Cluster::InternalSwap(PollStatusResponse_Cluster* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nodes_.InternalSwap(&other->_impl_.nodes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PollStatusResponse_Cluster::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2eproto_getter, &descriptor_table_kvstore_2eproto_once,
      file_level_metadata_kvstore_2eproto[18]);
}

// ===================================================================

class PollStatusResponse::_Internal {
 public:
};

PollStatusResponse::PollStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PollStatusResponse)
}
PollStatusResponse::PollStatusResponse(const PollStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PollStatusResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clusters_){from._impl_.clusters_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PollStatusResponse)
}

inline void PollStatusResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clusters_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PollStatusResponse::~PollStatusResponse() {
  // @@protoc_insertion_point(destructor:PollStatusResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PollStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clusters_.~RepeatedPtrField();
}

void PollStatusResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PollStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:PollStatusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clusters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PollStatusResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PollStatusResponse.Cluster clusters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_clusters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PollStatusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PollStatusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PollStatusResponse.Cluster clusters = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_clusters_size()); i < n; i++) {
    const auto& repfield = this->_internal_clusters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PollStatusResponse)
  return target;
}

size_t PollStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PollStatusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PollStatusResponse.Cluster clusters = 1;
  total_size += 1UL * this->_internal_clusters_size();
  for (const auto& msg : this->_impl_.clusters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PollStatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PollStatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PollStatusResponse::GetClassData() const { return &_class_data_; }


void PollStatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PollStatusResponse*>(&to_msg);
  auto& from = static_cast<const PollStatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PollStatusResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.clusters_.MergeFrom(from._impl_.clusters_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PollStatusResponse::CopyFrom(const PollStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PollStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PollStatusResponse::IsInitialized() const {
  return true;
}

void PollStatusResponse::InternalSwap(PollStatusResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.clusters_.InternalSwap(&other->_impl_.clusters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PollStatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2eproto_getter, &descriptor_table_kvstore_2eproto_once,
      file_level_metadata_kvstore_2eproto[19]);
}

// ===================================================================

class SuspendRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SuspendRequest>()._impl_._has_bits_);
  static void set_has_cluster_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_node_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SuspendRequest::SuspendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SuspendRequest)
}
SuspendRequest::SuspendRequest(const SuspendRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SuspendRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_addr_){}
    , decltype(_impl_.cluster_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.node_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_node_addr()) {
    _this->_impl_.node_addr_.Set(from._internal_node_addr(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.cluster_id_ = from._impl_.cluster_id_;
  // @@protoc_insertion_point(copy_constructor:SuspendRequest)
}

inline void SuspendRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_addr_){}
    , decltype(_impl_.cluster_id_){0}
  };
  _impl_.node_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SuspendRequest::~SuspendRequest() {
  // @@protoc_insertion_point(destructor:SuspendRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SuspendRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_addr_.Destroy();
}

void SuspendRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SuspendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SuspendRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.node_addr_.ClearNonDefaultToEmpty();
  }
  _impl_.cluster_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SuspendRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 cluster_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cluster_id(&has_bits);
          _impl_.cluster_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string node_addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_node_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SuspendRequest.node_addr"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SuspendRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SuspendRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 cluster_id = 1;
  if (_internal_has_cluster_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_cluster_id(), target);
  }

  // optional string node_addr = 2;
  if (_internal_has_node_addr()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_addr().data(), static_cast<int>(this->_internal_node_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SuspendRequest.node_addr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SuspendRequest)
  return target;
}

size_t SuspendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SuspendRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string node_addr = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_node_addr());
    }

    // optional int32 cluster_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cluster_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SuspendRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SuspendRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SuspendRequest::GetClassData() const { return &_class_data_; }


void SuspendRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SuspendRequest*>(&to_msg);
  auto& from = static_cast<const SuspendRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SuspendRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_node_addr(from._internal_node_addr());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.cluster_id_ = from._impl_.cluster_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SuspendRequest::CopyFrom(const SuspendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SuspendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuspendRequest::IsInitialized() const {
  return true;
}

void SuspendRequest::InternalSwap(SuspendRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.node_addr_, lhs_arena,
      &other->_impl_.node_addr_, rhs_arena
  );
  swap(_impl_.cluster_id_, other->_impl_.cluster_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SuspendRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2eproto_getter, &descriptor_table_kvstore_2eproto_once,
      file_level_metadata_kvstore_2eproto[20]);
}

// ===================================================================

class ReviveRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ReviveRequest>()._impl_._has_bits_);
  static void set_has_cluster_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_node_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReviveRequest::ReviveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ReviveRequest)
}
ReviveRequest::ReviveRequest(const ReviveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReviveRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_addr_){}
    , decltype(_impl_.cluster_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.node_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_node_addr()) {
    _this->_impl_.node_addr_.Set(from._internal_node_addr(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.cluster_id_ = from._impl_.cluster_id_;
  // @@protoc_insertion_point(copy_constructor:ReviveRequest)
}

inline void ReviveRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_addr_){}
    , decltype(_impl_.cluster_id_){0}
  };
  _impl_.node_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReviveRequest::~ReviveRequest() {
  // @@protoc_insertion_point(destructor:ReviveRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReviveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_addr_.Destroy();
}

void ReviveRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReviveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ReviveRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.node_addr_.ClearNonDefaultToEmpty();
  }
  _impl_.cluster_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReviveRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 cluster_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cluster_id(&has_bits);
          _impl_.cluster_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string node_addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_node_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReviveRequest.node_addr"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReviveRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReviveRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 cluster_id = 1;
  if (_internal_has_cluster_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_cluster_id(), target);
  }

  // optional string node_addr = 2;
  if (_internal_has_node_addr()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_addr().data(), static_cast<int>(this->_internal_node_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReviveRequest.node_addr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReviveRequest)
  return target;
}

size_t ReviveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReviveRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string node_addr = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_node_addr());
    }

    // optional int32 cluster_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cluster_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReviveRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReviveRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReviveRequest::GetClassData() const { return &_class_data_; }


void ReviveRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReviveRequest*>(&to_msg);
  auto& from = static_cast<const ReviveRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ReviveRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_node_addr(from._internal_node_addr());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.cluster_id_ = from._impl_.cluster_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReviveRequest::CopyFrom(const ReviveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReviveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReviveRequest::IsInitialized() const {
  return true;
}

void ReviveRequest::InternalSwap(ReviveRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.node_addr_, lhs_arena,
      &other->_impl_.node_addr_, rhs_arena
  );
  swap(_impl_.cluster_id_, other->_impl_.cluster_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReviveRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2eproto_getter, &descriptor_table_kvstore_2eproto_once,
      file_level_metadata_kvstore_2eproto[21]);
}

// ===================================================================

class NotifyRecoveryFinishedRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<NotifyRecoveryFinishedRequest>()._impl_._has_bits_);
  static void set_has_target_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NotifyRecoveryFinishedRequest::NotifyRecoveryFinishedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NotifyRecoveryFinishedRequest)
}
NotifyRecoveryFinishedRequest::NotifyRecoveryFinishedRequest(const NotifyRecoveryFinishedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NotifyRecoveryFinishedRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_addr_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.target_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_target_addr()) {
    _this->_impl_.target_addr_.Set(from._internal_target_addr(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:NotifyRecoveryFinishedRequest)
}

inline void NotifyRecoveryFinishedRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_addr_){}
  };
  _impl_.target_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NotifyRecoveryFinishedRequest::~NotifyRecoveryFinishedRequest() {
  // @@protoc_insertion_point(destructor:NotifyRecoveryFinishedRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotifyRecoveryFinishedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.target_addr_.Destroy();
}

void NotifyRecoveryFinishedRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NotifyRecoveryFinishedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:NotifyRecoveryFinishedRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.target_addr_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotifyRecoveryFinishedRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string target_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_target_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NotifyRecoveryFinishedRequest.target_addr"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotifyRecoveryFinishedRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NotifyRecoveryFinishedRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string target_addr = 1;
  if (_internal_has_target_addr()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_addr().data(), static_cast<int>(this->_internal_target_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NotifyRecoveryFinishedRequest.target_addr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NotifyRecoveryFinishedRequest)
  return target;
}

size_t NotifyRecoveryFinishedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NotifyRecoveryFinishedRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string target_addr = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_addr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotifyRecoveryFinishedRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NotifyRecoveryFinishedRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotifyRecoveryFinishedRequest::GetClassData() const { return &_class_data_; }


void NotifyRecoveryFinishedRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NotifyRecoveryFinishedRequest*>(&to_msg);
  auto& from = static_cast<const NotifyRecoveryFinishedRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NotifyRecoveryFinishedRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_target_addr()) {
    _this->_internal_set_target_addr(from._internal_target_addr());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotifyRecoveryFinishedRequest::CopyFrom(const NotifyRecoveryFinishedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NotifyRecoveryFinishedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyRecoveryFinishedRequest::IsInitialized() const {
  return true;
}

void NotifyRecoveryFinishedRequest::InternalSwap(NotifyRecoveryFinishedRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_addr_, lhs_arena,
      &other->_impl_.target_addr_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NotifyRecoveryFinishedRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kvstore_2eproto_getter, &descriptor_table_kvstore_2eproto_once,
      file_level_metadata_kvstore_2eproto[22]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::KVRequest_KVGetRequest*
Arena::CreateMaybeMessage< ::KVRequest_KVGetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KVRequest_KVGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::KVRequest_KVSgetRequest*
Arena::CreateMaybeMessage< ::KVRequest_KVSgetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KVRequest_KVSgetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::KVRequest_KVPutRequest*
Arena::CreateMaybeMessage< ::KVRequest_KVPutRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KVRequest_KVPutRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::KVRequest_KVSputRequest*
Arena::CreateMaybeMessage< ::KVRequest_KVSputRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KVRequest_KVSputRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::KVRequest_KVCPutRequest*
Arena::CreateMaybeMessage< ::KVRequest_KVCPutRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KVRequest_KVCPutRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::KVRequest_KVScputRequest*
Arena::CreateMaybeMessage< ::KVRequest_KVScputRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KVRequest_KVScputRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::KVRequest_KVDeleteRequest*
Arena::CreateMaybeMessage< ::KVRequest_KVDeleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KVRequest_KVDeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::KVRequest_KVSdeleteRequest*
Arena::CreateMaybeMessage< ::KVRequest_KVSdeleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KVRequest_KVSdeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::KVRequest_KVSuspendRequest*
Arena::CreateMaybeMessage< ::KVRequest_KVSuspendRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KVRequest_KVSuspendRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::KVRequest_KVRecoveryRequest*
Arena::CreateMaybeMessage< ::KVRequest_KVRecoveryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KVRequest_KVRecoveryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::KVRequest_KVFiletransferRequest*
Arena::CreateMaybeMessage< ::KVRequest_KVFiletransferRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KVRequest_KVFiletransferRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::KVRequest_KVReplayRequest*
Arena::CreateMaybeMessage< ::KVRequest_KVReplayRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KVRequest_KVReplayRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::KVRequest*
Arena::CreateMaybeMessage< ::KVRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KVRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::KVResponse*
Arena::CreateMaybeMessage< ::KVResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KVResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::FetchNodeRequest*
Arena::CreateMaybeMessage< ::FetchNodeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FetchNodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::FetchNodeResponse*
Arena::CreateMaybeMessage< ::FetchNodeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FetchNodeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::PollStatusRequest*
Arena::CreateMaybeMessage< ::PollStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PollStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::PollStatusResponse_Cluster_Node*
Arena::CreateMaybeMessage< ::PollStatusResponse_Cluster_Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PollStatusResponse_Cluster_Node >(arena);
}
template<> PROTOBUF_NOINLINE ::PollStatusResponse_Cluster*
Arena::CreateMaybeMessage< ::PollStatusResponse_Cluster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PollStatusResponse_Cluster >(arena);
}
template<> PROTOBUF_NOINLINE ::PollStatusResponse*
Arena::CreateMaybeMessage< ::PollStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PollStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SuspendRequest*
Arena::CreateMaybeMessage< ::SuspendRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SuspendRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ReviveRequest*
Arena::CreateMaybeMessage< ::ReviveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReviveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::NotifyRecoveryFinishedRequest*
Arena::CreateMaybeMessage< ::NotifyRecoveryFinishedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NotifyRecoveryFinishedRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
