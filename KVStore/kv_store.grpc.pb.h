// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: kv_store.proto
#ifndef GRPC_kv_5fstore_2eproto__INCLUDED
#define GRPC_kv_5fstore_2eproto__INCLUDED

#include "kv_store.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

// Interface exported by the Key-Value Storage Service.
class KVStoreService final {
 public:
  static constexpr char const* service_full_name() {
    return "KVStoreService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Stores a value v in column c of row r.
    virtual ::grpc::Status Put(::grpc::ClientContext* context, const ::KVPutRequest& request, ::KVPutResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::KVPutResponse>> AsyncPut(::grpc::ClientContext* context, const ::KVPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::KVPutResponse>>(AsyncPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::KVPutResponse>> PrepareAsyncPut(::grpc::ClientContext* context, const ::KVPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::KVPutResponse>>(PrepareAsyncPutRaw(context, request, cq));
    }
    // Returns the value stored in column c of row r.
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::KVGetRequest& request, ::KVGetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::KVGetResponse>> AsyncGet(::grpc::ClientContext* context, const ::KVGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::KVGetResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::KVGetResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::KVGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::KVGetResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    // Stores value v 2in column c of row r, but only if the current value is v1.
    virtual ::grpc::Status CPut(::grpc::ClientContext* context, const ::KVCPutRequest& request, ::KVCPutResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::KVCPutResponse>> AsyncCPut(::grpc::ClientContext* context, const ::KVCPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::KVCPutResponse>>(AsyncCPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::KVCPutResponse>> PrepareAsyncCPut(::grpc::ClientContext* context, const ::KVCPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::KVCPutResponse>>(PrepareAsyncCPutRaw(context, request, cq));
    }
    // Deletes the value in column c of row r.
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::KVDeleteRequest& request, ::KVDeleteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::KVDeleteResponse>> AsyncDelete(::grpc::ClientContext* context, const ::KVDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::KVDeleteResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::KVDeleteResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::KVDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::KVDeleteResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Stores a value v in column c of row r.
      virtual void Put(::grpc::ClientContext* context, const ::KVPutRequest* request, ::KVPutResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Put(::grpc::ClientContext* context, const ::KVPutRequest* request, ::KVPutResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Returns the value stored in column c of row r.
      virtual void Get(::grpc::ClientContext* context, const ::KVGetRequest* request, ::KVGetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::KVGetRequest* request, ::KVGetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Stores value v 2in column c of row r, but only if the current value is v1.
      virtual void CPut(::grpc::ClientContext* context, const ::KVCPutRequest* request, ::KVCPutResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CPut(::grpc::ClientContext* context, const ::KVCPutRequest* request, ::KVCPutResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Deletes the value in column c of row r.
      virtual void Delete(::grpc::ClientContext* context, const ::KVDeleteRequest* request, ::KVDeleteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::KVDeleteRequest* request, ::KVDeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::KVPutResponse>* AsyncPutRaw(::grpc::ClientContext* context, const ::KVPutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::KVPutResponse>* PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::KVPutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::KVGetResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::KVGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::KVGetResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::KVGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::KVCPutResponse>* AsyncCPutRaw(::grpc::ClientContext* context, const ::KVCPutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::KVCPutResponse>* PrepareAsyncCPutRaw(::grpc::ClientContext* context, const ::KVCPutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::KVDeleteResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::KVDeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::KVDeleteResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::KVDeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Put(::grpc::ClientContext* context, const ::KVPutRequest& request, ::KVPutResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::KVPutResponse>> AsyncPut(::grpc::ClientContext* context, const ::KVPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::KVPutResponse>>(AsyncPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::KVPutResponse>> PrepareAsyncPut(::grpc::ClientContext* context, const ::KVPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::KVPutResponse>>(PrepareAsyncPutRaw(context, request, cq));
    }
    ::grpc::Status Get(::grpc::ClientContext* context, const ::KVGetRequest& request, ::KVGetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::KVGetResponse>> AsyncGet(::grpc::ClientContext* context, const ::KVGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::KVGetResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::KVGetResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::KVGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::KVGetResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    ::grpc::Status CPut(::grpc::ClientContext* context, const ::KVCPutRequest& request, ::KVCPutResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::KVCPutResponse>> AsyncCPut(::grpc::ClientContext* context, const ::KVCPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::KVCPutResponse>>(AsyncCPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::KVCPutResponse>> PrepareAsyncCPut(::grpc::ClientContext* context, const ::KVCPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::KVCPutResponse>>(PrepareAsyncCPutRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::KVDeleteRequest& request, ::KVDeleteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::KVDeleteResponse>> AsyncDelete(::grpc::ClientContext* context, const ::KVDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::KVDeleteResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::KVDeleteResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::KVDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::KVDeleteResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Put(::grpc::ClientContext* context, const ::KVPutRequest* request, ::KVPutResponse* response, std::function<void(::grpc::Status)>) override;
      void Put(::grpc::ClientContext* context, const ::KVPutRequest* request, ::KVPutResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Get(::grpc::ClientContext* context, const ::KVGetRequest* request, ::KVGetResponse* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::KVGetRequest* request, ::KVGetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CPut(::grpc::ClientContext* context, const ::KVCPutRequest* request, ::KVCPutResponse* response, std::function<void(::grpc::Status)>) override;
      void CPut(::grpc::ClientContext* context, const ::KVCPutRequest* request, ::KVCPutResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Delete(::grpc::ClientContext* context, const ::KVDeleteRequest* request, ::KVDeleteResponse* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::KVDeleteRequest* request, ::KVDeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::KVPutResponse>* AsyncPutRaw(::grpc::ClientContext* context, const ::KVPutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::KVPutResponse>* PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::KVPutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::KVGetResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::KVGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::KVGetResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::KVGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::KVCPutResponse>* AsyncCPutRaw(::grpc::ClientContext* context, const ::KVCPutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::KVCPutResponse>* PrepareAsyncCPutRaw(::grpc::ClientContext* context, const ::KVCPutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::KVDeleteResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::KVDeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::KVDeleteResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::KVDeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Put_;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
    const ::grpc::internal::RpcMethod rpcmethod_CPut_;
    const ::grpc::internal::RpcMethod rpcmethod_Delete_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Stores a value v in column c of row r.
    virtual ::grpc::Status Put(::grpc::ServerContext* context, const ::KVPutRequest* request, ::KVPutResponse* response);
    // Returns the value stored in column c of row r.
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::KVGetRequest* request, ::KVGetResponse* response);
    // Stores value v 2in column c of row r, but only if the current value is v1.
    virtual ::grpc::Status CPut(::grpc::ServerContext* context, const ::KVCPutRequest* request, ::KVCPutResponse* response);
    // Deletes the value in column c of row r.
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::KVDeleteRequest* request, ::KVDeleteResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Put() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::KVPutRequest* /*request*/, ::KVPutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPut(::grpc::ServerContext* context, ::KVPutRequest* request, ::grpc::ServerAsyncResponseWriter< ::KVPutResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::KVGetRequest* /*request*/, ::KVGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::KVGetRequest* request, ::grpc::ServerAsyncResponseWriter< ::KVGetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CPut() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CPut(::grpc::ServerContext* /*context*/, const ::KVCPutRequest* /*request*/, ::KVCPutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCPut(::grpc::ServerContext* context, ::KVCPutRequest* request, ::grpc::ServerAsyncResponseWriter< ::KVCPutResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::KVDeleteRequest* /*request*/, ::KVDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::KVDeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::KVDeleteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Put<WithAsyncMethod_Get<WithAsyncMethod_CPut<WithAsyncMethod_Delete<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Put() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::KVPutRequest, ::KVPutResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::KVPutRequest* request, ::KVPutResponse* response) { return this->Put(context, request, response); }));}
    void SetMessageAllocatorFor_Put(
        ::grpc::MessageAllocator< ::KVPutRequest, ::KVPutResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::KVPutRequest, ::KVPutResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::KVPutRequest* /*request*/, ::KVPutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Put(
      ::grpc::CallbackServerContext* /*context*/, const ::KVPutRequest* /*request*/, ::KVPutResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Get() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::KVGetRequest, ::KVGetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::KVGetRequest* request, ::KVGetResponse* response) { return this->Get(context, request, response); }));}
    void SetMessageAllocatorFor_Get(
        ::grpc::MessageAllocator< ::KVGetRequest, ::KVGetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::KVGetRequest, ::KVGetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::KVGetRequest* /*request*/, ::KVGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::KVGetRequest* /*request*/, ::KVGetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CPut() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::KVCPutRequest, ::KVCPutResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::KVCPutRequest* request, ::KVCPutResponse* response) { return this->CPut(context, request, response); }));}
    void SetMessageAllocatorFor_CPut(
        ::grpc::MessageAllocator< ::KVCPutRequest, ::KVCPutResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::KVCPutRequest, ::KVCPutResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CPut(::grpc::ServerContext* /*context*/, const ::KVCPutRequest* /*request*/, ::KVCPutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CPut(
      ::grpc::CallbackServerContext* /*context*/, const ::KVCPutRequest* /*request*/, ::KVCPutResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Delete() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::KVDeleteRequest, ::KVDeleteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::KVDeleteRequest* request, ::KVDeleteResponse* response) { return this->Delete(context, request, response); }));}
    void SetMessageAllocatorFor_Delete(
        ::grpc::MessageAllocator< ::KVDeleteRequest, ::KVDeleteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::KVDeleteRequest, ::KVDeleteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::KVDeleteRequest* /*request*/, ::KVDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::KVDeleteRequest* /*request*/, ::KVDeleteResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Put<WithCallbackMethod_Get<WithCallbackMethod_CPut<WithCallbackMethod_Delete<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Put() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::KVPutRequest* /*request*/, ::KVPutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::KVGetRequest* /*request*/, ::KVGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CPut() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CPut(::grpc::ServerContext* /*context*/, const ::KVCPutRequest* /*request*/, ::KVCPutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::KVDeleteRequest* /*request*/, ::KVDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Put() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::KVPutRequest* /*request*/, ::KVPutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::KVGetRequest* /*request*/, ::KVGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CPut() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CPut(::grpc::ServerContext* /*context*/, const ::KVCPutRequest* /*request*/, ::KVCPutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCPut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Delete() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::KVDeleteRequest* /*request*/, ::KVDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Put() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Put(context, request, response); }));
    }
    ~WithRawCallbackMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::KVPutRequest* /*request*/, ::KVPutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Put(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Get() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Get(context, request, response); }));
    }
    ~WithRawCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::KVGetRequest* /*request*/, ::KVGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CPut() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CPut(context, request, response); }));
    }
    ~WithRawCallbackMethod_CPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CPut(::grpc::ServerContext* /*context*/, const ::KVCPutRequest* /*request*/, ::KVCPutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CPut(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Delete() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Delete(context, request, response); }));
    }
    ~WithRawCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::KVDeleteRequest* /*request*/, ::KVDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Put() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::KVPutRequest, ::KVPutResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::KVPutRequest, ::KVPutResponse>* streamer) {
                       return this->StreamedPut(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::KVPutRequest* /*request*/, ::KVPutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::KVPutRequest,::KVPutResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::KVGetRequest, ::KVGetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::KVGetRequest, ::KVGetResponse>* streamer) {
                       return this->StreamedGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::KVGetRequest* /*request*/, ::KVGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::KVGetRequest,::KVGetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CPut() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::KVCPutRequest, ::KVCPutResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::KVCPutRequest, ::KVCPutResponse>* streamer) {
                       return this->StreamedCPut(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CPut(::grpc::ServerContext* /*context*/, const ::KVCPutRequest* /*request*/, ::KVCPutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCPut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::KVCPutRequest,::KVCPutResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::KVDeleteRequest, ::KVDeleteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::KVDeleteRequest, ::KVDeleteResponse>* streamer) {
                       return this->StreamedDelete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::KVDeleteRequest* /*request*/, ::KVDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::KVDeleteRequest,::KVDeleteResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Put<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_CPut<WithStreamedUnaryMethod_Delete<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Put<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_CPut<WithStreamedUnaryMethod_Delete<Service > > > > StreamedService;
};


#endif  // GRPC_kv_5fstore_2eproto__INCLUDED
