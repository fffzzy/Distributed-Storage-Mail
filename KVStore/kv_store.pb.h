// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kv_store.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kv_5fstore_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kv_5fstore_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kv_5fstore_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kv_5fstore_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kv_5fstore_2eproto;
class KVCPutRequest;
struct KVCPutRequestDefaultTypeInternal;
extern KVCPutRequestDefaultTypeInternal _KVCPutRequest_default_instance_;
class KVCPutResponse;
struct KVCPutResponseDefaultTypeInternal;
extern KVCPutResponseDefaultTypeInternal _KVCPutResponse_default_instance_;
class KVDeleteRequest;
struct KVDeleteRequestDefaultTypeInternal;
extern KVDeleteRequestDefaultTypeInternal _KVDeleteRequest_default_instance_;
class KVDeleteResponse;
struct KVDeleteResponseDefaultTypeInternal;
extern KVDeleteResponseDefaultTypeInternal _KVDeleteResponse_default_instance_;
class KVGetRequest;
struct KVGetRequestDefaultTypeInternal;
extern KVGetRequestDefaultTypeInternal _KVGetRequest_default_instance_;
class KVGetResponse;
struct KVGetResponseDefaultTypeInternal;
extern KVGetResponseDefaultTypeInternal _KVGetResponse_default_instance_;
class KVPutRequest;
struct KVPutRequestDefaultTypeInternal;
extern KVPutRequestDefaultTypeInternal _KVPutRequest_default_instance_;
class KVPutResponse;
struct KVPutResponseDefaultTypeInternal;
extern KVPutResponseDefaultTypeInternal _KVPutResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::KVCPutRequest* Arena::CreateMaybeMessage<::KVCPutRequest>(Arena*);
template<> ::KVCPutResponse* Arena::CreateMaybeMessage<::KVCPutResponse>(Arena*);
template<> ::KVDeleteRequest* Arena::CreateMaybeMessage<::KVDeleteRequest>(Arena*);
template<> ::KVDeleteResponse* Arena::CreateMaybeMessage<::KVDeleteResponse>(Arena*);
template<> ::KVGetRequest* Arena::CreateMaybeMessage<::KVGetRequest>(Arena*);
template<> ::KVGetResponse* Arena::CreateMaybeMessage<::KVGetResponse>(Arena*);
template<> ::KVPutRequest* Arena::CreateMaybeMessage<::KVPutRequest>(Arena*);
template<> ::KVPutResponse* Arena::CreateMaybeMessage<::KVPutResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum KVResStatus : int {
  SUCCESS = 0,
  FAILURE = 1,
  KVResStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  KVResStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool KVResStatus_IsValid(int value);
constexpr KVResStatus KVResStatus_MIN = SUCCESS;
constexpr KVResStatus KVResStatus_MAX = FAILURE;
constexpr int KVResStatus_ARRAYSIZE = KVResStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KVResStatus_descriptor();
template<typename T>
inline const std::string& KVResStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KVResStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KVResStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KVResStatus_descriptor(), enum_t_value);
}
inline bool KVResStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KVResStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KVResStatus>(
    KVResStatus_descriptor(), name, value);
}
// ===================================================================

class KVPutRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KVPutRequest) */ {
 public:
  inline KVPutRequest() : KVPutRequest(nullptr) {}
  ~KVPutRequest() override;
  explicit PROTOBUF_CONSTEXPR KVPutRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KVPutRequest(const KVPutRequest& from);
  KVPutRequest(KVPutRequest&& from) noexcept
    : KVPutRequest() {
    *this = ::std::move(from);
  }

  inline KVPutRequest& operator=(const KVPutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KVPutRequest& operator=(KVPutRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KVPutRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const KVPutRequest* internal_default_instance() {
    return reinterpret_cast<const KVPutRequest*>(
               &_KVPutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KVPutRequest& a, KVPutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KVPutRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KVPutRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KVPutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KVPutRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KVPutRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KVPutRequest& from) {
    KVPutRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KVPutRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KVPutRequest";
  }
  protected:
  explicit KVPutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowFieldNumber = 1,
    kColFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // optional string row = 1;
  bool has_row() const;
  private:
  bool _internal_has_row() const;
  public:
  void clear_row();
  const std::string& row() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_row(ArgT0&& arg0, ArgT... args);
  std::string* mutable_row();
  PROTOBUF_NODISCARD std::string* release_row();
  void set_allocated_row(std::string* row);
  private:
  const std::string& _internal_row() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_row(const std::string& value);
  std::string* _internal_mutable_row();
  public:

  // optional string col = 2;
  bool has_col() const;
  private:
  bool _internal_has_col() const;
  public:
  void clear_col();
  const std::string& col() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_col(ArgT0&& arg0, ArgT... args);
  std::string* mutable_col();
  PROTOBUF_NODISCARD std::string* release_col();
  void set_allocated_col(std::string* col);
  private:
  const std::string& _internal_col() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_col(const std::string& value);
  std::string* _internal_mutable_col();
  public:

  // optional string value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:KVPutRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr row_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr col_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kv_5fstore_2eproto;
};
// -------------------------------------------------------------------

class KVPutResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KVPutResponse) */ {
 public:
  inline KVPutResponse() : KVPutResponse(nullptr) {}
  ~KVPutResponse() override;
  explicit PROTOBUF_CONSTEXPR KVPutResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KVPutResponse(const KVPutResponse& from);
  KVPutResponse(KVPutResponse&& from) noexcept
    : KVPutResponse() {
    *this = ::std::move(from);
  }

  inline KVPutResponse& operator=(const KVPutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline KVPutResponse& operator=(KVPutResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KVPutResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const KVPutResponse* internal_default_instance() {
    return reinterpret_cast<const KVPutResponse*>(
               &_KVPutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KVPutResponse& a, KVPutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(KVPutResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KVPutResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KVPutResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KVPutResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KVPutResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KVPutResponse& from) {
    KVPutResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KVPutResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KVPutResponse";
  }
  protected:
  explicit KVPutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kErrorMsgFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // optional string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional string error_msg = 3;
  bool has_error_msg() const;
  private:
  bool _internal_has_error_msg() const;
  public:
  void clear_error_msg();
  const std::string& error_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_msg();
  PROTOBUF_NODISCARD std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);
  private:
  const std::string& _internal_error_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_msg(const std::string& value);
  std::string* _internal_mutable_error_msg();
  public:

  // optional .KVResStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::KVResStatus status() const;
  void set_status(::KVResStatus value);
  private:
  ::KVResStatus _internal_status() const;
  void _internal_set_status(::KVResStatus value);
  public:

  // @@protoc_insertion_point(class_scope:KVPutResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kv_5fstore_2eproto;
};
// -------------------------------------------------------------------

class KVGetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KVGetRequest) */ {
 public:
  inline KVGetRequest() : KVGetRequest(nullptr) {}
  ~KVGetRequest() override;
  explicit PROTOBUF_CONSTEXPR KVGetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KVGetRequest(const KVGetRequest& from);
  KVGetRequest(KVGetRequest&& from) noexcept
    : KVGetRequest() {
    *this = ::std::move(from);
  }

  inline KVGetRequest& operator=(const KVGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KVGetRequest& operator=(KVGetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KVGetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const KVGetRequest* internal_default_instance() {
    return reinterpret_cast<const KVGetRequest*>(
               &_KVGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(KVGetRequest& a, KVGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KVGetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KVGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KVGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KVGetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KVGetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KVGetRequest& from) {
    KVGetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KVGetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KVGetRequest";
  }
  protected:
  explicit KVGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowFieldNumber = 1,
    kColFieldNumber = 2,
  };
  // optional string row = 1;
  bool has_row() const;
  private:
  bool _internal_has_row() const;
  public:
  void clear_row();
  const std::string& row() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_row(ArgT0&& arg0, ArgT... args);
  std::string* mutable_row();
  PROTOBUF_NODISCARD std::string* release_row();
  void set_allocated_row(std::string* row);
  private:
  const std::string& _internal_row() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_row(const std::string& value);
  std::string* _internal_mutable_row();
  public:

  // optional string col = 2;
  bool has_col() const;
  private:
  bool _internal_has_col() const;
  public:
  void clear_col();
  const std::string& col() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_col(ArgT0&& arg0, ArgT... args);
  std::string* mutable_col();
  PROTOBUF_NODISCARD std::string* release_col();
  void set_allocated_col(std::string* col);
  private:
  const std::string& _internal_col() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_col(const std::string& value);
  std::string* _internal_mutable_col();
  public:

  // @@protoc_insertion_point(class_scope:KVGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr row_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr col_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kv_5fstore_2eproto;
};
// -------------------------------------------------------------------

class KVGetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KVGetResponse) */ {
 public:
  inline KVGetResponse() : KVGetResponse(nullptr) {}
  ~KVGetResponse() override;
  explicit PROTOBUF_CONSTEXPR KVGetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KVGetResponse(const KVGetResponse& from);
  KVGetResponse(KVGetResponse&& from) noexcept
    : KVGetResponse() {
    *this = ::std::move(from);
  }

  inline KVGetResponse& operator=(const KVGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline KVGetResponse& operator=(KVGetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KVGetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const KVGetResponse* internal_default_instance() {
    return reinterpret_cast<const KVGetResponse*>(
               &_KVGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(KVGetResponse& a, KVGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(KVGetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KVGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KVGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KVGetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KVGetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KVGetResponse& from) {
    KVGetResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KVGetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KVGetResponse";
  }
  protected:
  explicit KVGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kErrorMsgFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // optional string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional string error_msg = 3;
  bool has_error_msg() const;
  private:
  bool _internal_has_error_msg() const;
  public:
  void clear_error_msg();
  const std::string& error_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_msg();
  PROTOBUF_NODISCARD std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);
  private:
  const std::string& _internal_error_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_msg(const std::string& value);
  std::string* _internal_mutable_error_msg();
  public:

  // optional .KVResStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::KVResStatus status() const;
  void set_status(::KVResStatus value);
  private:
  ::KVResStatus _internal_status() const;
  void _internal_set_status(::KVResStatus value);
  public:

  // @@protoc_insertion_point(class_scope:KVGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kv_5fstore_2eproto;
};
// -------------------------------------------------------------------

class KVCPutRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KVCPutRequest) */ {
 public:
  inline KVCPutRequest() : KVCPutRequest(nullptr) {}
  ~KVCPutRequest() override;
  explicit PROTOBUF_CONSTEXPR KVCPutRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KVCPutRequest(const KVCPutRequest& from);
  KVCPutRequest(KVCPutRequest&& from) noexcept
    : KVCPutRequest() {
    *this = ::std::move(from);
  }

  inline KVCPutRequest& operator=(const KVCPutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KVCPutRequest& operator=(KVCPutRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KVCPutRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const KVCPutRequest* internal_default_instance() {
    return reinterpret_cast<const KVCPutRequest*>(
               &_KVCPutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(KVCPutRequest& a, KVCPutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KVCPutRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KVCPutRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KVCPutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KVCPutRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KVCPutRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KVCPutRequest& from) {
    KVCPutRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KVCPutRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KVCPutRequest";
  }
  protected:
  explicit KVCPutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowFieldNumber = 1,
    kColFieldNumber = 2,
    kPrevValueFieldNumber = 3,
    kValueFieldNumber = 4,
  };
  // optional string row = 1;
  bool has_row() const;
  private:
  bool _internal_has_row() const;
  public:
  void clear_row();
  const std::string& row() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_row(ArgT0&& arg0, ArgT... args);
  std::string* mutable_row();
  PROTOBUF_NODISCARD std::string* release_row();
  void set_allocated_row(std::string* row);
  private:
  const std::string& _internal_row() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_row(const std::string& value);
  std::string* _internal_mutable_row();
  public:

  // optional string col = 2;
  bool has_col() const;
  private:
  bool _internal_has_col() const;
  public:
  void clear_col();
  const std::string& col() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_col(ArgT0&& arg0, ArgT... args);
  std::string* mutable_col();
  PROTOBUF_NODISCARD std::string* release_col();
  void set_allocated_col(std::string* col);
  private:
  const std::string& _internal_col() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_col(const std::string& value);
  std::string* _internal_mutable_col();
  public:

  // optional string prev_value = 3;
  bool has_prev_value() const;
  private:
  bool _internal_has_prev_value() const;
  public:
  void clear_prev_value();
  const std::string& prev_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prev_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prev_value();
  PROTOBUF_NODISCARD std::string* release_prev_value();
  void set_allocated_prev_value(std::string* prev_value);
  private:
  const std::string& _internal_prev_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prev_value(const std::string& value);
  std::string* _internal_mutable_prev_value();
  public:

  // optional string value = 4;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:KVCPutRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr row_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr col_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kv_5fstore_2eproto;
};
// -------------------------------------------------------------------

class KVCPutResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KVCPutResponse) */ {
 public:
  inline KVCPutResponse() : KVCPutResponse(nullptr) {}
  ~KVCPutResponse() override;
  explicit PROTOBUF_CONSTEXPR KVCPutResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KVCPutResponse(const KVCPutResponse& from);
  KVCPutResponse(KVCPutResponse&& from) noexcept
    : KVCPutResponse() {
    *this = ::std::move(from);
  }

  inline KVCPutResponse& operator=(const KVCPutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline KVCPutResponse& operator=(KVCPutResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KVCPutResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const KVCPutResponse* internal_default_instance() {
    return reinterpret_cast<const KVCPutResponse*>(
               &_KVCPutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(KVCPutResponse& a, KVCPutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(KVCPutResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KVCPutResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KVCPutResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KVCPutResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KVCPutResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KVCPutResponse& from) {
    KVCPutResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KVCPutResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KVCPutResponse";
  }
  protected:
  explicit KVCPutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kErrorMsgFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // optional string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional string error_msg = 3;
  bool has_error_msg() const;
  private:
  bool _internal_has_error_msg() const;
  public:
  void clear_error_msg();
  const std::string& error_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_msg();
  PROTOBUF_NODISCARD std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);
  private:
  const std::string& _internal_error_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_msg(const std::string& value);
  std::string* _internal_mutable_error_msg();
  public:

  // optional .KVResStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::KVResStatus status() const;
  void set_status(::KVResStatus value);
  private:
  ::KVResStatus _internal_status() const;
  void _internal_set_status(::KVResStatus value);
  public:

  // @@protoc_insertion_point(class_scope:KVCPutResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kv_5fstore_2eproto;
};
// -------------------------------------------------------------------

class KVDeleteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KVDeleteRequest) */ {
 public:
  inline KVDeleteRequest() : KVDeleteRequest(nullptr) {}
  ~KVDeleteRequest() override;
  explicit PROTOBUF_CONSTEXPR KVDeleteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KVDeleteRequest(const KVDeleteRequest& from);
  KVDeleteRequest(KVDeleteRequest&& from) noexcept
    : KVDeleteRequest() {
    *this = ::std::move(from);
  }

  inline KVDeleteRequest& operator=(const KVDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KVDeleteRequest& operator=(KVDeleteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KVDeleteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const KVDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const KVDeleteRequest*>(
               &_KVDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(KVDeleteRequest& a, KVDeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KVDeleteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KVDeleteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KVDeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KVDeleteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KVDeleteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KVDeleteRequest& from) {
    KVDeleteRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KVDeleteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KVDeleteRequest";
  }
  protected:
  explicit KVDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowFieldNumber = 1,
    kColFieldNumber = 2,
  };
  // optional string row = 1;
  bool has_row() const;
  private:
  bool _internal_has_row() const;
  public:
  void clear_row();
  const std::string& row() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_row(ArgT0&& arg0, ArgT... args);
  std::string* mutable_row();
  PROTOBUF_NODISCARD std::string* release_row();
  void set_allocated_row(std::string* row);
  private:
  const std::string& _internal_row() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_row(const std::string& value);
  std::string* _internal_mutable_row();
  public:

  // optional string col = 2;
  bool has_col() const;
  private:
  bool _internal_has_col() const;
  public:
  void clear_col();
  const std::string& col() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_col(ArgT0&& arg0, ArgT... args);
  std::string* mutable_col();
  PROTOBUF_NODISCARD std::string* release_col();
  void set_allocated_col(std::string* col);
  private:
  const std::string& _internal_col() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_col(const std::string& value);
  std::string* _internal_mutable_col();
  public:

  // @@protoc_insertion_point(class_scope:KVDeleteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr row_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr col_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kv_5fstore_2eproto;
};
// -------------------------------------------------------------------

class KVDeleteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KVDeleteResponse) */ {
 public:
  inline KVDeleteResponse() : KVDeleteResponse(nullptr) {}
  ~KVDeleteResponse() override;
  explicit PROTOBUF_CONSTEXPR KVDeleteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KVDeleteResponse(const KVDeleteResponse& from);
  KVDeleteResponse(KVDeleteResponse&& from) noexcept
    : KVDeleteResponse() {
    *this = ::std::move(from);
  }

  inline KVDeleteResponse& operator=(const KVDeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline KVDeleteResponse& operator=(KVDeleteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KVDeleteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const KVDeleteResponse* internal_default_instance() {
    return reinterpret_cast<const KVDeleteResponse*>(
               &_KVDeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(KVDeleteResponse& a, KVDeleteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(KVDeleteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KVDeleteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KVDeleteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KVDeleteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KVDeleteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KVDeleteResponse& from) {
    KVDeleteResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KVDeleteResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KVDeleteResponse";
  }
  protected:
  explicit KVDeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kErrorMsgFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // optional string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional string error_msg = 3;
  bool has_error_msg() const;
  private:
  bool _internal_has_error_msg() const;
  public:
  void clear_error_msg();
  const std::string& error_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_msg();
  PROTOBUF_NODISCARD std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);
  private:
  const std::string& _internal_error_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_msg(const std::string& value);
  std::string* _internal_mutable_error_msg();
  public:

  // optional .KVResStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::KVResStatus status() const;
  void set_status(::KVResStatus value);
  private:
  ::KVResStatus _internal_status() const;
  void _internal_set_status(::KVResStatus value);
  public:

  // @@protoc_insertion_point(class_scope:KVDeleteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kv_5fstore_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KVPutRequest

// optional string row = 1;
inline bool KVPutRequest::_internal_has_row() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KVPutRequest::has_row() const {
  return _internal_has_row();
}
inline void KVPutRequest::clear_row() {
  _impl_.row_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KVPutRequest::row() const {
  // @@protoc_insertion_point(field_get:KVPutRequest.row)
  return _internal_row();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KVPutRequest::set_row(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.row_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KVPutRequest.row)
}
inline std::string* KVPutRequest::mutable_row() {
  std::string* _s = _internal_mutable_row();
  // @@protoc_insertion_point(field_mutable:KVPutRequest.row)
  return _s;
}
inline const std::string& KVPutRequest::_internal_row() const {
  return _impl_.row_.Get();
}
inline void KVPutRequest::_internal_set_row(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.row_.Set(value, GetArenaForAllocation());
}
inline std::string* KVPutRequest::_internal_mutable_row() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.row_.Mutable(GetArenaForAllocation());
}
inline std::string* KVPutRequest::release_row() {
  // @@protoc_insertion_point(field_release:KVPutRequest.row)
  if (!_internal_has_row()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.row_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.row_.IsDefault()) {
    _impl_.row_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void KVPutRequest::set_allocated_row(std::string* row) {
  if (row != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.row_.SetAllocated(row, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.row_.IsDefault()) {
    _impl_.row_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KVPutRequest.row)
}

// optional string col = 2;
inline bool KVPutRequest::_internal_has_col() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KVPutRequest::has_col() const {
  return _internal_has_col();
}
inline void KVPutRequest::clear_col() {
  _impl_.col_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KVPutRequest::col() const {
  // @@protoc_insertion_point(field_get:KVPutRequest.col)
  return _internal_col();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KVPutRequest::set_col(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.col_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KVPutRequest.col)
}
inline std::string* KVPutRequest::mutable_col() {
  std::string* _s = _internal_mutable_col();
  // @@protoc_insertion_point(field_mutable:KVPutRequest.col)
  return _s;
}
inline const std::string& KVPutRequest::_internal_col() const {
  return _impl_.col_.Get();
}
inline void KVPutRequest::_internal_set_col(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.col_.Set(value, GetArenaForAllocation());
}
inline std::string* KVPutRequest::_internal_mutable_col() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.col_.Mutable(GetArenaForAllocation());
}
inline std::string* KVPutRequest::release_col() {
  // @@protoc_insertion_point(field_release:KVPutRequest.col)
  if (!_internal_has_col()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.col_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.col_.IsDefault()) {
    _impl_.col_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void KVPutRequest::set_allocated_col(std::string* col) {
  if (col != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.col_.SetAllocated(col, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.col_.IsDefault()) {
    _impl_.col_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KVPutRequest.col)
}

// optional string value = 3;
inline bool KVPutRequest::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KVPutRequest::has_value() const {
  return _internal_has_value();
}
inline void KVPutRequest::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& KVPutRequest::value() const {
  // @@protoc_insertion_point(field_get:KVPutRequest.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KVPutRequest::set_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KVPutRequest.value)
}
inline std::string* KVPutRequest::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:KVPutRequest.value)
  return _s;
}
inline const std::string& KVPutRequest::_internal_value() const {
  return _impl_.value_.Get();
}
inline void KVPutRequest::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* KVPutRequest::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* KVPutRequest::release_value() {
  // @@protoc_insertion_point(field_release:KVPutRequest.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void KVPutRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KVPutRequest.value)
}

// -------------------------------------------------------------------

// KVPutResponse

// optional .KVResStatus status = 1;
inline bool KVPutResponse::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KVPutResponse::has_status() const {
  return _internal_has_status();
}
inline void KVPutResponse::clear_status() {
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::KVResStatus KVPutResponse::_internal_status() const {
  return static_cast< ::KVResStatus >(_impl_.status_);
}
inline ::KVResStatus KVPutResponse::status() const {
  // @@protoc_insertion_point(field_get:KVPutResponse.status)
  return _internal_status();
}
inline void KVPutResponse::_internal_set_status(::KVResStatus value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.status_ = value;
}
inline void KVPutResponse::set_status(::KVResStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:KVPutResponse.status)
}

// optional string message = 2;
inline bool KVPutResponse::_internal_has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KVPutResponse::has_message() const {
  return _internal_has_message();
}
inline void KVPutResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KVPutResponse::message() const {
  // @@protoc_insertion_point(field_get:KVPutResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KVPutResponse::set_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KVPutResponse.message)
}
inline std::string* KVPutResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:KVPutResponse.message)
  return _s;
}
inline const std::string& KVPutResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void KVPutResponse::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* KVPutResponse::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* KVPutResponse::release_message() {
  // @@protoc_insertion_point(field_release:KVPutResponse.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void KVPutResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KVPutResponse.message)
}

// optional string error_msg = 3;
inline bool KVPutResponse::_internal_has_error_msg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KVPutResponse::has_error_msg() const {
  return _internal_has_error_msg();
}
inline void KVPutResponse::clear_error_msg() {
  _impl_.error_msg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KVPutResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:KVPutResponse.error_msg)
  return _internal_error_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KVPutResponse::set_error_msg(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.error_msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KVPutResponse.error_msg)
}
inline std::string* KVPutResponse::mutable_error_msg() {
  std::string* _s = _internal_mutable_error_msg();
  // @@protoc_insertion_point(field_mutable:KVPutResponse.error_msg)
  return _s;
}
inline const std::string& KVPutResponse::_internal_error_msg() const {
  return _impl_.error_msg_.Get();
}
inline void KVPutResponse::_internal_set_error_msg(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.error_msg_.Set(value, GetArenaForAllocation());
}
inline std::string* KVPutResponse::_internal_mutable_error_msg() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.error_msg_.Mutable(GetArenaForAllocation());
}
inline std::string* KVPutResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:KVPutResponse.error_msg)
  if (!_internal_has_error_msg()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.error_msg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_msg_.IsDefault()) {
    _impl_.error_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void KVPutResponse::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.error_msg_.SetAllocated(error_msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_msg_.IsDefault()) {
    _impl_.error_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KVPutResponse.error_msg)
}

// -------------------------------------------------------------------

// KVGetRequest

// optional string row = 1;
inline bool KVGetRequest::_internal_has_row() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KVGetRequest::has_row() const {
  return _internal_has_row();
}
inline void KVGetRequest::clear_row() {
  _impl_.row_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KVGetRequest::row() const {
  // @@protoc_insertion_point(field_get:KVGetRequest.row)
  return _internal_row();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KVGetRequest::set_row(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.row_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KVGetRequest.row)
}
inline std::string* KVGetRequest::mutable_row() {
  std::string* _s = _internal_mutable_row();
  // @@protoc_insertion_point(field_mutable:KVGetRequest.row)
  return _s;
}
inline const std::string& KVGetRequest::_internal_row() const {
  return _impl_.row_.Get();
}
inline void KVGetRequest::_internal_set_row(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.row_.Set(value, GetArenaForAllocation());
}
inline std::string* KVGetRequest::_internal_mutable_row() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.row_.Mutable(GetArenaForAllocation());
}
inline std::string* KVGetRequest::release_row() {
  // @@protoc_insertion_point(field_release:KVGetRequest.row)
  if (!_internal_has_row()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.row_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.row_.IsDefault()) {
    _impl_.row_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void KVGetRequest::set_allocated_row(std::string* row) {
  if (row != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.row_.SetAllocated(row, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.row_.IsDefault()) {
    _impl_.row_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KVGetRequest.row)
}

// optional string col = 2;
inline bool KVGetRequest::_internal_has_col() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KVGetRequest::has_col() const {
  return _internal_has_col();
}
inline void KVGetRequest::clear_col() {
  _impl_.col_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KVGetRequest::col() const {
  // @@protoc_insertion_point(field_get:KVGetRequest.col)
  return _internal_col();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KVGetRequest::set_col(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.col_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KVGetRequest.col)
}
inline std::string* KVGetRequest::mutable_col() {
  std::string* _s = _internal_mutable_col();
  // @@protoc_insertion_point(field_mutable:KVGetRequest.col)
  return _s;
}
inline const std::string& KVGetRequest::_internal_col() const {
  return _impl_.col_.Get();
}
inline void KVGetRequest::_internal_set_col(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.col_.Set(value, GetArenaForAllocation());
}
inline std::string* KVGetRequest::_internal_mutable_col() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.col_.Mutable(GetArenaForAllocation());
}
inline std::string* KVGetRequest::release_col() {
  // @@protoc_insertion_point(field_release:KVGetRequest.col)
  if (!_internal_has_col()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.col_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.col_.IsDefault()) {
    _impl_.col_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void KVGetRequest::set_allocated_col(std::string* col) {
  if (col != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.col_.SetAllocated(col, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.col_.IsDefault()) {
    _impl_.col_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KVGetRequest.col)
}

// -------------------------------------------------------------------

// KVGetResponse

// optional .KVResStatus status = 1;
inline bool KVGetResponse::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KVGetResponse::has_status() const {
  return _internal_has_status();
}
inline void KVGetResponse::clear_status() {
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::KVResStatus KVGetResponse::_internal_status() const {
  return static_cast< ::KVResStatus >(_impl_.status_);
}
inline ::KVResStatus KVGetResponse::status() const {
  // @@protoc_insertion_point(field_get:KVGetResponse.status)
  return _internal_status();
}
inline void KVGetResponse::_internal_set_status(::KVResStatus value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.status_ = value;
}
inline void KVGetResponse::set_status(::KVResStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:KVGetResponse.status)
}

// optional string message = 2;
inline bool KVGetResponse::_internal_has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KVGetResponse::has_message() const {
  return _internal_has_message();
}
inline void KVGetResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KVGetResponse::message() const {
  // @@protoc_insertion_point(field_get:KVGetResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KVGetResponse::set_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KVGetResponse.message)
}
inline std::string* KVGetResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:KVGetResponse.message)
  return _s;
}
inline const std::string& KVGetResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void KVGetResponse::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* KVGetResponse::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* KVGetResponse::release_message() {
  // @@protoc_insertion_point(field_release:KVGetResponse.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void KVGetResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KVGetResponse.message)
}

// optional string error_msg = 3;
inline bool KVGetResponse::_internal_has_error_msg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KVGetResponse::has_error_msg() const {
  return _internal_has_error_msg();
}
inline void KVGetResponse::clear_error_msg() {
  _impl_.error_msg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KVGetResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:KVGetResponse.error_msg)
  return _internal_error_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KVGetResponse::set_error_msg(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.error_msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KVGetResponse.error_msg)
}
inline std::string* KVGetResponse::mutable_error_msg() {
  std::string* _s = _internal_mutable_error_msg();
  // @@protoc_insertion_point(field_mutable:KVGetResponse.error_msg)
  return _s;
}
inline const std::string& KVGetResponse::_internal_error_msg() const {
  return _impl_.error_msg_.Get();
}
inline void KVGetResponse::_internal_set_error_msg(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.error_msg_.Set(value, GetArenaForAllocation());
}
inline std::string* KVGetResponse::_internal_mutable_error_msg() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.error_msg_.Mutable(GetArenaForAllocation());
}
inline std::string* KVGetResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:KVGetResponse.error_msg)
  if (!_internal_has_error_msg()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.error_msg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_msg_.IsDefault()) {
    _impl_.error_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void KVGetResponse::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.error_msg_.SetAllocated(error_msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_msg_.IsDefault()) {
    _impl_.error_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KVGetResponse.error_msg)
}

// -------------------------------------------------------------------

// KVCPutRequest

// optional string row = 1;
inline bool KVCPutRequest::_internal_has_row() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KVCPutRequest::has_row() const {
  return _internal_has_row();
}
inline void KVCPutRequest::clear_row() {
  _impl_.row_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KVCPutRequest::row() const {
  // @@protoc_insertion_point(field_get:KVCPutRequest.row)
  return _internal_row();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KVCPutRequest::set_row(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.row_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KVCPutRequest.row)
}
inline std::string* KVCPutRequest::mutable_row() {
  std::string* _s = _internal_mutable_row();
  // @@protoc_insertion_point(field_mutable:KVCPutRequest.row)
  return _s;
}
inline const std::string& KVCPutRequest::_internal_row() const {
  return _impl_.row_.Get();
}
inline void KVCPutRequest::_internal_set_row(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.row_.Set(value, GetArenaForAllocation());
}
inline std::string* KVCPutRequest::_internal_mutable_row() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.row_.Mutable(GetArenaForAllocation());
}
inline std::string* KVCPutRequest::release_row() {
  // @@protoc_insertion_point(field_release:KVCPutRequest.row)
  if (!_internal_has_row()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.row_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.row_.IsDefault()) {
    _impl_.row_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void KVCPutRequest::set_allocated_row(std::string* row) {
  if (row != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.row_.SetAllocated(row, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.row_.IsDefault()) {
    _impl_.row_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KVCPutRequest.row)
}

// optional string col = 2;
inline bool KVCPutRequest::_internal_has_col() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KVCPutRequest::has_col() const {
  return _internal_has_col();
}
inline void KVCPutRequest::clear_col() {
  _impl_.col_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KVCPutRequest::col() const {
  // @@protoc_insertion_point(field_get:KVCPutRequest.col)
  return _internal_col();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KVCPutRequest::set_col(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.col_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KVCPutRequest.col)
}
inline std::string* KVCPutRequest::mutable_col() {
  std::string* _s = _internal_mutable_col();
  // @@protoc_insertion_point(field_mutable:KVCPutRequest.col)
  return _s;
}
inline const std::string& KVCPutRequest::_internal_col() const {
  return _impl_.col_.Get();
}
inline void KVCPutRequest::_internal_set_col(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.col_.Set(value, GetArenaForAllocation());
}
inline std::string* KVCPutRequest::_internal_mutable_col() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.col_.Mutable(GetArenaForAllocation());
}
inline std::string* KVCPutRequest::release_col() {
  // @@protoc_insertion_point(field_release:KVCPutRequest.col)
  if (!_internal_has_col()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.col_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.col_.IsDefault()) {
    _impl_.col_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void KVCPutRequest::set_allocated_col(std::string* col) {
  if (col != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.col_.SetAllocated(col, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.col_.IsDefault()) {
    _impl_.col_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KVCPutRequest.col)
}

// optional string prev_value = 3;
inline bool KVCPutRequest::_internal_has_prev_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KVCPutRequest::has_prev_value() const {
  return _internal_has_prev_value();
}
inline void KVCPutRequest::clear_prev_value() {
  _impl_.prev_value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& KVCPutRequest::prev_value() const {
  // @@protoc_insertion_point(field_get:KVCPutRequest.prev_value)
  return _internal_prev_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KVCPutRequest::set_prev_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.prev_value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KVCPutRequest.prev_value)
}
inline std::string* KVCPutRequest::mutable_prev_value() {
  std::string* _s = _internal_mutable_prev_value();
  // @@protoc_insertion_point(field_mutable:KVCPutRequest.prev_value)
  return _s;
}
inline const std::string& KVCPutRequest::_internal_prev_value() const {
  return _impl_.prev_value_.Get();
}
inline void KVCPutRequest::_internal_set_prev_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.prev_value_.Set(value, GetArenaForAllocation());
}
inline std::string* KVCPutRequest::_internal_mutable_prev_value() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.prev_value_.Mutable(GetArenaForAllocation());
}
inline std::string* KVCPutRequest::release_prev_value() {
  // @@protoc_insertion_point(field_release:KVCPutRequest.prev_value)
  if (!_internal_has_prev_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.prev_value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prev_value_.IsDefault()) {
    _impl_.prev_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void KVCPutRequest::set_allocated_prev_value(std::string* prev_value) {
  if (prev_value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.prev_value_.SetAllocated(prev_value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prev_value_.IsDefault()) {
    _impl_.prev_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KVCPutRequest.prev_value)
}

// optional string value = 4;
inline bool KVCPutRequest::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KVCPutRequest::has_value() const {
  return _internal_has_value();
}
inline void KVCPutRequest::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& KVCPutRequest::value() const {
  // @@protoc_insertion_point(field_get:KVCPutRequest.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KVCPutRequest::set_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KVCPutRequest.value)
}
inline std::string* KVCPutRequest::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:KVCPutRequest.value)
  return _s;
}
inline const std::string& KVCPutRequest::_internal_value() const {
  return _impl_.value_.Get();
}
inline void KVCPutRequest::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* KVCPutRequest::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* KVCPutRequest::release_value() {
  // @@protoc_insertion_point(field_release:KVCPutRequest.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void KVCPutRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KVCPutRequest.value)
}

// -------------------------------------------------------------------

// KVCPutResponse

// optional .KVResStatus status = 1;
inline bool KVCPutResponse::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KVCPutResponse::has_status() const {
  return _internal_has_status();
}
inline void KVCPutResponse::clear_status() {
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::KVResStatus KVCPutResponse::_internal_status() const {
  return static_cast< ::KVResStatus >(_impl_.status_);
}
inline ::KVResStatus KVCPutResponse::status() const {
  // @@protoc_insertion_point(field_get:KVCPutResponse.status)
  return _internal_status();
}
inline void KVCPutResponse::_internal_set_status(::KVResStatus value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.status_ = value;
}
inline void KVCPutResponse::set_status(::KVResStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:KVCPutResponse.status)
}

// optional string message = 2;
inline bool KVCPutResponse::_internal_has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KVCPutResponse::has_message() const {
  return _internal_has_message();
}
inline void KVCPutResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KVCPutResponse::message() const {
  // @@protoc_insertion_point(field_get:KVCPutResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KVCPutResponse::set_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KVCPutResponse.message)
}
inline std::string* KVCPutResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:KVCPutResponse.message)
  return _s;
}
inline const std::string& KVCPutResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void KVCPutResponse::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* KVCPutResponse::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* KVCPutResponse::release_message() {
  // @@protoc_insertion_point(field_release:KVCPutResponse.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void KVCPutResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KVCPutResponse.message)
}

// optional string error_msg = 3;
inline bool KVCPutResponse::_internal_has_error_msg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KVCPutResponse::has_error_msg() const {
  return _internal_has_error_msg();
}
inline void KVCPutResponse::clear_error_msg() {
  _impl_.error_msg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KVCPutResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:KVCPutResponse.error_msg)
  return _internal_error_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KVCPutResponse::set_error_msg(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.error_msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KVCPutResponse.error_msg)
}
inline std::string* KVCPutResponse::mutable_error_msg() {
  std::string* _s = _internal_mutable_error_msg();
  // @@protoc_insertion_point(field_mutable:KVCPutResponse.error_msg)
  return _s;
}
inline const std::string& KVCPutResponse::_internal_error_msg() const {
  return _impl_.error_msg_.Get();
}
inline void KVCPutResponse::_internal_set_error_msg(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.error_msg_.Set(value, GetArenaForAllocation());
}
inline std::string* KVCPutResponse::_internal_mutable_error_msg() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.error_msg_.Mutable(GetArenaForAllocation());
}
inline std::string* KVCPutResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:KVCPutResponse.error_msg)
  if (!_internal_has_error_msg()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.error_msg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_msg_.IsDefault()) {
    _impl_.error_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void KVCPutResponse::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.error_msg_.SetAllocated(error_msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_msg_.IsDefault()) {
    _impl_.error_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KVCPutResponse.error_msg)
}

// -------------------------------------------------------------------

// KVDeleteRequest

// optional string row = 1;
inline bool KVDeleteRequest::_internal_has_row() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KVDeleteRequest::has_row() const {
  return _internal_has_row();
}
inline void KVDeleteRequest::clear_row() {
  _impl_.row_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KVDeleteRequest::row() const {
  // @@protoc_insertion_point(field_get:KVDeleteRequest.row)
  return _internal_row();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KVDeleteRequest::set_row(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.row_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KVDeleteRequest.row)
}
inline std::string* KVDeleteRequest::mutable_row() {
  std::string* _s = _internal_mutable_row();
  // @@protoc_insertion_point(field_mutable:KVDeleteRequest.row)
  return _s;
}
inline const std::string& KVDeleteRequest::_internal_row() const {
  return _impl_.row_.Get();
}
inline void KVDeleteRequest::_internal_set_row(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.row_.Set(value, GetArenaForAllocation());
}
inline std::string* KVDeleteRequest::_internal_mutable_row() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.row_.Mutable(GetArenaForAllocation());
}
inline std::string* KVDeleteRequest::release_row() {
  // @@protoc_insertion_point(field_release:KVDeleteRequest.row)
  if (!_internal_has_row()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.row_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.row_.IsDefault()) {
    _impl_.row_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void KVDeleteRequest::set_allocated_row(std::string* row) {
  if (row != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.row_.SetAllocated(row, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.row_.IsDefault()) {
    _impl_.row_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KVDeleteRequest.row)
}

// optional string col = 2;
inline bool KVDeleteRequest::_internal_has_col() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KVDeleteRequest::has_col() const {
  return _internal_has_col();
}
inline void KVDeleteRequest::clear_col() {
  _impl_.col_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KVDeleteRequest::col() const {
  // @@protoc_insertion_point(field_get:KVDeleteRequest.col)
  return _internal_col();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KVDeleteRequest::set_col(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.col_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KVDeleteRequest.col)
}
inline std::string* KVDeleteRequest::mutable_col() {
  std::string* _s = _internal_mutable_col();
  // @@protoc_insertion_point(field_mutable:KVDeleteRequest.col)
  return _s;
}
inline const std::string& KVDeleteRequest::_internal_col() const {
  return _impl_.col_.Get();
}
inline void KVDeleteRequest::_internal_set_col(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.col_.Set(value, GetArenaForAllocation());
}
inline std::string* KVDeleteRequest::_internal_mutable_col() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.col_.Mutable(GetArenaForAllocation());
}
inline std::string* KVDeleteRequest::release_col() {
  // @@protoc_insertion_point(field_release:KVDeleteRequest.col)
  if (!_internal_has_col()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.col_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.col_.IsDefault()) {
    _impl_.col_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void KVDeleteRequest::set_allocated_col(std::string* col) {
  if (col != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.col_.SetAllocated(col, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.col_.IsDefault()) {
    _impl_.col_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KVDeleteRequest.col)
}

// -------------------------------------------------------------------

// KVDeleteResponse

// optional .KVResStatus status = 1;
inline bool KVDeleteResponse::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KVDeleteResponse::has_status() const {
  return _internal_has_status();
}
inline void KVDeleteResponse::clear_status() {
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::KVResStatus KVDeleteResponse::_internal_status() const {
  return static_cast< ::KVResStatus >(_impl_.status_);
}
inline ::KVResStatus KVDeleteResponse::status() const {
  // @@protoc_insertion_point(field_get:KVDeleteResponse.status)
  return _internal_status();
}
inline void KVDeleteResponse::_internal_set_status(::KVResStatus value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.status_ = value;
}
inline void KVDeleteResponse::set_status(::KVResStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:KVDeleteResponse.status)
}

// optional string message = 2;
inline bool KVDeleteResponse::_internal_has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KVDeleteResponse::has_message() const {
  return _internal_has_message();
}
inline void KVDeleteResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KVDeleteResponse::message() const {
  // @@protoc_insertion_point(field_get:KVDeleteResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KVDeleteResponse::set_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KVDeleteResponse.message)
}
inline std::string* KVDeleteResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:KVDeleteResponse.message)
  return _s;
}
inline const std::string& KVDeleteResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void KVDeleteResponse::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* KVDeleteResponse::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* KVDeleteResponse::release_message() {
  // @@protoc_insertion_point(field_release:KVDeleteResponse.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void KVDeleteResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KVDeleteResponse.message)
}

// optional string error_msg = 3;
inline bool KVDeleteResponse::_internal_has_error_msg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KVDeleteResponse::has_error_msg() const {
  return _internal_has_error_msg();
}
inline void KVDeleteResponse::clear_error_msg() {
  _impl_.error_msg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KVDeleteResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:KVDeleteResponse.error_msg)
  return _internal_error_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KVDeleteResponse::set_error_msg(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.error_msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KVDeleteResponse.error_msg)
}
inline std::string* KVDeleteResponse::mutable_error_msg() {
  std::string* _s = _internal_mutable_error_msg();
  // @@protoc_insertion_point(field_mutable:KVDeleteResponse.error_msg)
  return _s;
}
inline const std::string& KVDeleteResponse::_internal_error_msg() const {
  return _impl_.error_msg_.Get();
}
inline void KVDeleteResponse::_internal_set_error_msg(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.error_msg_.Set(value, GetArenaForAllocation());
}
inline std::string* KVDeleteResponse::_internal_mutable_error_msg() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.error_msg_.Mutable(GetArenaForAllocation());
}
inline std::string* KVDeleteResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:KVDeleteResponse.error_msg)
  if (!_internal_has_error_msg()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.error_msg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_msg_.IsDefault()) {
    _impl_.error_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void KVDeleteResponse::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.error_msg_.SetAllocated(error_msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_msg_.IsDefault()) {
    _impl_.error_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KVDeleteResponse.error_msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::KVResStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KVResStatus>() {
  return ::KVResStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kv_5fstore_2eproto
