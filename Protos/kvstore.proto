syntax = "proto3";

import "google/protobuf/empty.proto";

/* Interface exported by the KVStore Service Master node. */
service KVStoreMaster {
  // Frontend calls FetchNodeAddr to get the address of the primary node.
  rpc FetchNodeAddr(FetchNodeRequest) returns (FetchNodeResponse){}

  // Console -> Master poll states
  rpc PollStatus(PollStatusRequest) returns (PollStatusResponse) {}

  // Console -> Master suspends specific nodes.
  rpc Suspend(SuspendRequest) returns (KVResponse) {}

  // Console -> Master revives specific nodes.
  rpc Revive(ReviveRequest) returns (KVResponse) {}

  // Node -> Master notify that recovery is finished.
  rpc NotifyRecoveryFinished(NotifyRecoveryFinishedRequest) returns (KVResponse) {}
}

/* Interface exported by the KVStore Service Worker nodes which actually 
 * processes the requests from the front-end. */
service KVStoreNode {
  rpc Execute(KVRequest) returns (KVResponse){}

  // Health Check if the replica node is alive.
  rpc CheckHealth(google.protobuf.Empty) returns(KVResponse){}
}

/* Status of rpc response */
enum KVStatusCode {
  SUCCESS = 0;
  FAILURE = 1;
  SUSPENDED = 2;
  RECOVERING = 3;
}

/* Status of file transfer */
enum FileType {
  CHECKPOINT = 0;
  LOGFILE = 1;
}

/* General KV request from frontend. */
message KVRequest {

  // KVGetRequest.
  message KVGetRequest {
    optional string row = 1;    // [Required]
    optional string col = 2;    // [Required]
  }

  // KVSGetRequest, Get request from primary to secondary
  // simply notify secondary nodes to switch tablet without returning value
  message KVSgetRequest {
    optional string row = 1;    // [Required]
    optional string col = 2;    // [Required]
  }

  // KVPutRequest.
  message KVPutRequest {
    optional string row = 1;    // [Required]
    optional string col = 2;    // [Required]
    optional string value = 3;  // [Required]
  }

  // KVSputRequest.
  message KVSputRequest {
    optional string row = 1;    // [Required]
    optional string col = 2;    // [Required]
    optional string value = 3;  // [Required]
  }

  // KVCPutRequest.
  message KVCPutRequest {
    optional string row = 1;        // [Required]
    optional string col = 2;        // [Required]
    optional string cur_value = 3;  // [Required]
    optional string new_value = 4;  // [Required]
  }

  // KVScputRequest.
  message KVScputRequest {
    optional string row = 1;        // [Required]
    optional string col = 2;        // [Required]
    optional string cur_value = 3;  // [Required]
    optional string new_value = 4;  // [Required]
  }

  // KVDeleteRequest.
  message KVDeleteRequest {
    optional string row = 1;    // [Required]
    optional string col = 2;    // [Required]
  }

  // KVSDeleteRequest.
  message KVSdeleteRequest {
    optional string row = 1;    // [Required]
    optional string col = 2;    // [Required]
  }

  // KVSuspendRequest (master -> node)
  message KVSuspendRequest {
    optional string target_addr = 1;    // [Required] target_addr is the addr of the secondary to be suspended
  }

  // KVRecoveryRequest, master -> primary(alive), or primary -> secondary(suspend)
  message KVRecoveryRequest {
    optional string target_addr = 1;    // [Required] target_addr is the addr of the secondary to be revived
  }

  // KVRecoveryRequest, primary -> secondary(running or suspend)
  message KVSrecoveryRequest {
    optional string target_addr = 1;    // [Required] target_addr is the addr of the secondary to be revived
  }
  
  // KVFiletransferRequest, primary sends checkpoint and log files to secondary for recovery
  message KVFiletransferRequest {
    optional FileType file_type = 1;  // [Required]
    optional int32 tablet_idx = 2;             // [Required]
    optional string content = 3;      // [Required]
  }

  // KVReplayRequest, primary acks secondary that file transfer finishes, start to replay to recover
  message KVReplayRequest {
    optional int32 tablet_num = 1;          // [Required]
    optional string tablet_target = 2;  // [Required] format <tablet_idx1>,<tablet_idx2>,<tablet_idx3>,
  }

  // Request can only be one of put/get/cput/delete.
  oneof request {
    KVGetRequest get_request = 1;
    KVSgetRequest sget_request = 2;
    KVPutRequest put_request = 3;
    KVSputRequest sput_request = 4;
    KVCPutRequest cput_request = 5;
    KVScputRequest scput_request = 6;
    KVDeleteRequest delete_request = 7;
    KVSdeleteRequest sdelete_request = 8;
    KVSuspendRequest suspend_request = 9;
    KVRecoveryRequest recovery_request = 10;
    KVSrecoveryRequest srecovery_request = 11;
    KVFiletransferRequest filetransfer_request = 12;
    KVReplayRequest replay_request = 13;
  }
}

message KVResponse {
  // Status code indicates if operation is done successfully.
  optional KVStatusCode status = 1; // [Required]

  // If failed, message contains customized error information.
  // If success, message is the return value for Get operation
  // or any customized information for other operations.
  optional string message = 2;  // [Required]
}

/* FetchNodeRequest contains row and col that will be combined
 * to do consistent hashing later. */
message FetchNodeRequest {
  optional string row = 1;  // [Required]
  optional string col = 2;  // [Required]
}

/* Response returns the address of primary cluster node. */
message FetchNodeResponse {
  optional KVStatusCode status = 1; // [Required]
  optional string addr = 2;
  optional string error_message = 3;
}


message PollStatusRequest {  
}

/* Contains information of all clusters */
message PollStatusResponse {
  // Cluster contains a list of nodes.  
  message Cluster {
    // Node information.
    message Node {
      // Indicate if the node is a primary node or secondary node.
      optional bool is_primary = 1;
      // Indicate the address of node. 
      optional string address = 2;
      // Each node could be "Running", "Suspended", "Recovering" and "Crashed".
      optional string state = 3;
    }

    repeated Node nodes = 1;
  }

  // Response contains a list of clusters.
  repeated Cluster clusters = 1;
}

message SuspendRequest {
  optional int32 cluster_id = 1;
  optional string node_addr = 2;
}

message ReviveRequest {
  optional int32 cluster_id = 1;
  optional string node_addr = 2;
}

// KVAckrecoverRequest (primary node -> master, ack recovering is finished)
message NotifyRecoveryFinishedRequest {
  optional string target_addr = 1;    // [Required] target_addr is the addr of the secondary to be revived
}